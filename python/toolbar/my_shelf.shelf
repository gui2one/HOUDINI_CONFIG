<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <shelfSet name="shelf_set_1" label="Create and Refine">
    <memberToolshelf name="create"/>
    <memberToolshelf name="modify"/>
    <memberToolshelf name="model"/>
    <memberToolshelf name="polygon"/>
    <memberToolshelf name="deform"/>
    <memberToolshelf name="texture"/>
    <memberToolshelf name="rigging"/>
    <memberToolshelf name="muscles"/>
    <memberToolshelf name="characters"/>
    <memberToolshelf name="constraints"/>
    <memberToolshelf name="groomtools"/>
    <memberToolshelf name="guidemodify"/>
    <memberToolshelf name="grooming"/>
    <memberToolshelf name="terrainfx"/>
    <memberToolshelf name="simplefx"/>
    <memberToolshelf name="cloud"/>
    <memberToolshelf name="volume"/>
    <memberToolshelf name="gui2one_2"/>
    <memberToolshelf name="gui2one"/>
    <memberToolshelf name="octane"/>
    <memberToolshelf name="volume_tools_dynamics"/>
    <memberToolshelf name="labs_toolset"/>
    <memberToolshelf name="Redshift"/>
    <memberToolshelf name="leuleu_dev"/>
  </shelfSet>

  <toolshelf name="gui2one_2" label="gui2one 2.0">
    <memberTool name="multi_curve_edit"/>
    <memberTool name="copy_materials"/>
    <memberTool name="convert_to_octane_material"/>
    <memberTool name="place_highlight"/>
    <memberTool name="color_converter"/>
    <memberTool name="gui2one_color_picker"/>
    <memberTool name="RS generate PBR material"/>
    <memberTool name="copy_params"/>
  </toolshelf>

  <toolshelf name="gui2one" label="gui2one">
    <memberTool name="null_OUT"/>
    <memberTool name="dof_null"/>
    <memberTool name="dof_null_V2"/>
    <memberTool name="extract_planes"/>
    <memberTool name="CHOP_clean"/>
    <memberTool name="find reference"/>
    <memberTool name="HtoAE_V3"/>
    <memberTool name="obj_export"/>
    <memberTool name="freeze_curve_edit"/>
    <memberTool name="shader_preview"/>
    <memberTool name="place_obj"/>
    <memberTool name="copy_textures"/>
    <memberTool name="find_materials"/>
    <memberTool name="edges_to_curve"/>
    <memberTool name="bake_keyframes"/>
    <memberTool name="Cop_detect_passes"/>
    <memberTool name="import_AE3D_cam"/>
    <memberTool name="read_raw_file"/>
    <memberTool name="write_raw_file"/>
    <memberTool name="write_raw_file_V2"/>
    <memberTool name="octane_ROP_preview"/>
    <memberTool name="find_opened_definition"/>
    <memberTool name="pop render view"/>
    <memberTool name="add_ogl_params"/>
    <memberTool name="change_uv_display"/>
    <memberTool name="loadAECamFile"/>
    <memberTool name="cam_angle_to_F"/>
    <memberTool name="read_AE_data"/>
    <memberTool name="install_HIP_hdas"/>
    <memberTool name="list_parm_templates"/>
    <memberTool name="add_instance_point"/>
    <memberTool name="find_opened_HDAs"/>
    <memberTool name="ffmpeg_render"/>
    <memberTool name="osl_reload_script"/>
    <memberTool name="HipLoader"/>
    <memberTool name="check_duplicate_inputs"/>
  </toolshelf>

  <toolshelf name="constraints" label="Constraints">
    <memberTool name="object_constraintparentblend"/>
    <memberTool name="object_constraintblend"/>
    <memberTool name="object_constraintlookat"/>
    <memberTool name="object_constraintpath"/>
    <memberTool name="object_constraintpoints"/>
    <memberTool name="object_constraintsurface"/>
    <memberTool name="object_constrainttransform"/>
    <memberTool name="object_blendpose"/>
    <memberTool name="object_lagobject"/>
    <memberTool name="object_jiggleobject"/>
    <memberTool name="object_constraintgamepad"/>
    <memberTool name="sop_constraintnetwork"/>
    <memberTool name="object_constrainttoggle"/>
    <memberTool name="object_constraintbake"/>
    <memberTool name="object_constraintdelete"/>
  </toolshelf>

  <toolshelf name="simplefx" label="Simple FX">
    <memberTool name="geometry_vellumsimplecloth"/>
    <memberTool name="geometry_vellumsimplesoftbody"/>
    <memberTool name="geometry_rbdsimplefracture"/>
    <memberTool name="geometry_rbdsimpleguided"/>
    <memberTool name="geometry_pyrosimplebillowysmoke"/>
    <memberTool name="geometry_spyro_gpuburst"/>
    <memberTool name="geometry_pyrosimplefireball"/>
    <memberTool name="geometry_spyro_airexplosion"/>
    <memberTool name="geometry_spyro_groundexplosion"/>
    <memberTool name="geometry_spyro_campfire"/>
    <memberTool name="geometry_pyrosimplefirespread"/>
  </toolshelf>

  <toolshelf name="rigging" label="Rigging">
    <memberTool name="object_bones"/>
    <memberTool name="object_bonesfromcurve"/>
    <memberTool name="object_pose"/>
    <memberTool name="rigging_ikfromobjects"/>
    <memberTool name="rigging_ikfrombones"/>
    <memberTool name="object_capturegeometry"/>
    <memberTool name="object_editcaptureregion"/>
    <memberTool name="object_editcaptureweight"/>
    <memberTool name="object_editcaptureblend"/>
    <memberTool name="object_mirrorcapture"/>
    <memberTool name="object_paintcapturelayer"/>
    <memberTool name="object_aligncapturepose"/>
    <memberTool name="sop_deltamush"/>
    <memberTool name="sop_comb"/>
    <memberTool name="object_posespacedeform"/>
    <memberTool name="object_autorigs"/>
  </toolshelf>

  <toolshelf name="volume" label="Volume">
    <memberTool name="geometry_fogvolume"/>
    <memberTool name="geometry_vdbfrompolygons"/>
    <memberTool name="geometry_vdbfromparticles"/>
    <memberTool name="geometry_paintcolorvolume"/>
    <memberTool name="geometry_paintfogvolume"/>
    <memberTool name="geometry_paintsdfvolume"/>
    <memberTool name="geometry_volumerasterizepoints"/>
    <memberTool name="geometry_volumerasterizeparticles"/>
    <memberTool name="geometry_volumerasterizecurve"/>
    <memberTool name="geometry_convertvdb"/>
  </toolshelf>

  <toolshelf name="texture" label="Texture">
    <memberTool name="sop_uvproject"/>
    <memberTool name="sop_uvedit"/>
    <memberTool name="sop_uvbrush"/>
    <memberTool name="sop_uvfuse"/>
    <memberTool name="sop_uvflatten::2.0"/>
    <memberTool name="sop_uvpelt::2.0"/>
    <memberTool name="sop_texture"/>
    <memberTool name="sop_uvtransform::2.0"/>
    <memberTool name="sop_uvunwrap"/>
    <memberTool name="sop_uvquickshade"/>
    <memberTool name="generic_cleartexcache"/>
    <memberTool name="sop_uvsmooth"/>
  </toolshelf>

  <toolshelf name="terrainfx" label="Terrain FX">
    <memberTool name="terrain_hills"/>
    <memberTool name="terrain_mountain"/>
    <memberTool name="terrain_valley"/>
    <memberTool name="terrain_moonscape"/>
    <memberTool name="terrain_islands"/>
    <memberTool name="terrain_canyon"/>
    <memberTool name="terrain_dunes"/>
  </toolshelf>

  <toolshelf name="cloud" label="Cloud FX">
    <memberTool name="cloud_create"/>
    <memberTool name="sop_cloud::2.0"/>
    <memberTool name="sop_cloudnoise"/>
    <memberTool name="cloud_light"/>
    <memberTool name="sky_rig"/>
  </toolshelf>

  <toolshelf name="deform" label="Deform">
    <memberTool name="geometry_twist"/>
    <memberTool name="sop_bend"/>
    <memberTool name="geometry_lineartaper"/>
    <memberTool name="geometry_squashstretch"/>
    <memberTool name="sop_bulge"/>
    <memberTool name="sop_lattice"/>
    <memberTool name="sop_fractal"/>
    <memberTool name="sop_mountain::2.0"/>
    <memberTool name="geometry_waves"/>
    <memberTool name="sop_ripple::2.0"/>
    <memberTool name="object_morph"/>
  </toolshelf>

  <toolshelf name="polygon" label="Polygon">
    <memberTool name="sop_topobuild"/>
    <memberTool name="sop_polydraw"/>
    <memberTool name="sop_polyextrude::2.0"/>
    <memberTool name="sop_polybevel::3.0"/>
    <memberTool name="sop_polybridge"/>
    <memberTool name="sop_polysplit::2.0"/>
    <memberTool name="sop_edgeloop"/>
    <memberTool name="sop_polyreduce::2.0"/>
    <memberTool name="sop_polyfill"/>
    <memberTool name="sop_polyexpand2d"/>
    <memberTool name="sop_edgecollapse"/>
    <memberTool name="sop_edgecusp"/>
    <memberTool name="sop_edgeflip"/>
    <memberTool name="sop_edgedivide"/>
    <memberTool name="sop_dissolve::2.0"/>
    <memberTool name="sop_knife"/>
    <memberTool name="sop_clip"/>
    <memberTool name="sop_subdivide"/>
    <memberTool name="sop_facet"/>
    <memberTool name="sop_pointweld"/>
    <memberTool name="sop_fuse::2.0"/>
    <memberTool name="geometry_snap"/>
    <memberTool name="sop_smooth::2.0"/>
  </toolshelf>

  <toolshelf name="model" label="Model">
    <memberTool name="sop_revolve::2.0"/>
    <memberTool name="geometry_loft"/>
    <memberTool name="sop_skin"/>
    <memberTool name="sop_rails"/>
    <memberTool name="sop_sweep::2.0"/>
    <memberTool name="sop_creep"/>
    <memberTool name="sop_ray"/>
    <memberTool name="sop_boolean::2.0"/>
    <memberTool name="geometry_voronoifracture"/>
    <memberTool name="sop_topobuild"/>
    <memberTool name="sop_carve"/>
    <memberTool name="sop_convert"/>
    <memberTool name="sop_refine"/>
    <memberTool name="sop_reverse"/>
    <memberTool name="sop_sculpt"/>
    <memberTool name="sop_scatter::2.0"/>
    <memberTool name="sop_clusterpoints"/>
    <memberTool name="geo_group"/>
    <memberTool name="sop_edit"/>
    <memberTool name="sop_visibility"/>
  </toolshelf>

  <toolshelf name="modify" label="Modify">
    <memberTool name="object_combine"/>
    <memberTool name="geometry_extract"/>
    <memberTool name="geometry_mirror"/>
    <memberTool name="geometry_copy"/>
    <memberTool name="geometry_duplicate"/>
    <memberTool name="tool_align"/>
    <memberTool name="object_matchtransform"/>
    <memberTool name="object_centerpivot"/>
    <memberTool name="object_movetopivot"/>
    <memberTool name="object_freeze"/>
    <memberTool name="object_bakeanimation"/>
    <memberTool name="generic_delete"/>
    <memberTool name="generic_hide"/>
    <memberTool name="object_parent"/>
  </toolshelf>

  <toolshelf name="create" label="Create">
    <memberTool name="geometry_box"/>
    <memberTool name="geometry_sphere"/>
    <memberTool name="geometry_tube"/>
    <memberTool name="geometry_torus"/>
    <memberTool name="geometry_grid"/>
    <memberTool name="object_null"/>
    <memberTool name="geometry_line"/>
    <memberTool name="geometry_circle"/>
    <memberTool name="sop_curve"/>
    <memberTool name="geometry_drawcurve"/>
    <memberTool name="object_path"/>
    <memberTool name="geometry_spraypaint"/>
    <memberTool name="sop_font"/>
    <memberTool name="geometry_platonic"/>
    <memberTool name="sop_lsystem"/>
    <memberTool name="sop_metaball"/>
    <memberTool name="geometry_file"/>
  </toolshelf>

  <toolshelf name="characters" label="Characters">
    <memberTool name="object_simplebiped"/>
    <memberTool name="object_simplefemale"/>
    <memberTool name="object_simplemale"/>
    <memberTool name="object_mocapbiped1"/>
    <memberTool name="object_mocapbiped2"/>
    <memberTool name="object_mocapbiped3"/>
    <memberTool name="object_mocapbiped3"/>
  </toolshelf>

  <toolshelf name="muscles" label="Muscles">
    <memberTool name="object_riggedmuscle"/>
    <memberTool name="object_strokemuscle"/>
    <memberTool name="object_musclerig"/>
    <memberTool name="object_musclepin"/>
    <memberTool name="object_frankenmuscle"/>
    <memberTool name="geometry_mirror"/>
    <memberTool name="object_attachmuscles"/>
    <memberTool name="object_detachmuscles"/>
    <memberTool name="object_setmuscleid"/>
    <memberTool name="object_muscledisplace"/>
    <memberTool name="object_paintmusclemask"/>
    <memberTool name="object_mirrormusclecapture"/>
    <memberTool name="object_tissuesimulate"/>
  </toolshelf>

  <toolshelf name="guidemodify" label="Guide Process">
    <memberTool name="sop_groom_guideinit"/>
    <memberTool name="sop_groom_curveadvect"/>
    <memberTool name="sop_groom_reguide"/>
    <memberTool name="sop_groom_guideprocess_setdir"/>
    <memberTool name="sop_groom_guideprocess_length"/>
    <memberTool name="sop_groom_guideprocess_lift"/>
    <memberTool name="sop_groom_guideprocess_straighten"/>
    <memberTool name="sop_groom_guideprocess_smooth"/>
    <memberTool name="sop_groom_guideprocess_frizz"/>
    <memberTool name="sop_groom_guideprocess_bend"/>
    <memberTool name="sop_groom_hairclump"/>
    <memberTool name="sop_groom_drawpartingline"/>
    <memberTool name="sop_groom_whitehair"/>
  </toolshelf>

  <toolshelf name="groomtools" label="Hair Utils">
    <memberTool name="object_groom_addfur"/>
    <memberTool name="object_groom_guidegroom"/>
    <memberTool name="object_groom_groommerge"/>
    <memberTool name="object_groom_animateguides"/>
    <memberTool name="object_groom_simguides"/>
    <memberTool name="object_groom_hairgen"/>
    <memberTool name="object_groom_isolateparts"/>
    <memberTool name="object_groom_togglehairdisplay"/>
    <memberTool name="object_groom_haircardgen"/>
    <memberTool name="object_groom_haircardtexture"/>
  </toolshelf>

  <toolshelf name="grooming" label="Guide Brushes">
    <memberTool name="object_drawhairguides"/>
    <memberTool name="object_plantguides"/>
    <memberTool name="object_groomhairinscreen"/>
    <memberTool name="object_groomhairalongsurface"/>
    <memberTool name="object_groomliftbrush"/>
    <memberTool name="object_groomclumpbrush"/>
    <memberTool name="object_groompartbrush"/>
    <memberTool name="object_groomadjustlength"/>
    <memberTool name="object_groomsmooth"/>
    <memberTool name="object_groomcuthair"/>
    <memberTool name="object_groomextendhair"/>
    <memberTool name="object_groom_recachestrokes"/>
  </toolshelf>

  <tool name="gui2one_color_picker" label="Color Picker" icon="hicon:/SVGIcons.index?MISC_new.svg">
    <script scriptType="python"><![CDATA[from PySide2 import QtGui, QtCore
from PySide2 import QtWidgets

class MyColorPicker(QtWidgets.QWidget):
    def __init__(self, parent=None):
        QtWidgets.QWidget.__init__(self, parent)
        
        box = QtWidgets.QVBoxLayout()
        
        file_chooser_btn = hou.qt.FileChooserButton()
        file_chooser_btn.setFileChooserTitle("Please select a file")
        file_chooser_btn.setFileChooserMode(hou.fileChooserMode.Read)
        file_chooser_btn.fileSelected.connect(self.onFileSelected)

        self.colorField = hou.qt.ColorField()
        self.setGeometry(200,200,500,500)
        self.setWindowTitle("Color Picker")
        self.setLayout(box)

        self.scrollArea = QtWidgets.QScrollArea()

        box.addWidget(self.scrollArea)
        self.lbl = QtWidgets.QLabel()
        self.lbl.resize(300,300)
        self.scrollArea.setWidget(self.lbl)
        self.scrollArea.setWidgetResizable(True)

        # self.lbl.HoverMove.connect(self.onMouseMove)
        box.addWidget(file_chooser_btn)
        box.addWidget(self.colorField)
        
    def onFileSelected(self, file_path):
        print("Selected file:", file_path)
        self.image = QtGui.QImage(file_path)

        pixmap = QtGui.QPixmap(self.image)
        self.lbl.setPixmap(pixmap.scaled(self.lbl.size() , QtCore.Qt.KeepAspectRatio , QtCore.Qt.SmoothTransformation))
        # self.lbl.setPixmap(pixmap)
        # self.lbl.resize(self.image.size())
        
    def mouseMoveEvent(self, event):
        x = event.x() - self.scrollArea.x()
        y = event.y() - self.scrollArea.y()
        x = x / float(self.lbl.size().width())
        y = y / float(self.lbl.size().height())
        print("mouse move event", x, y)

    def resizeEvent(self, event) :
        print(event.size())
        self.lbl.resize(self.scrollArea.size())
        


colorPicker = MyColorPicker()
colorPicker.setParent(hou.qt.mainWindow(), QtCore.Qt.Window)

colorPicker.show()]]></script>
  </tool>

  <tool name="color_converter" label="Color Converter" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[btn_id, values = hou.ui.readMultiInput("color value :", ("r", "g", "b"))


r = float(values[0]) / 256.0
g = float(values[1]) / 256.0
b = float(values[2]) / 256.0

r = r ** (2.2)
g = g ** (2.2)
b = b ** (2.2)
print(r, g, b)]]></script>
  </tool>

  <tool name="convert_to_octane_material" label="Convert to Octane Material" icon="hicon:/SVGIcons.index?SHOP_material.svg">
    <script scriptType="python"><![CDATA[import sys
sel = hou.selectedNodes()
if len(sel) == 0:
    hou.ui.displayMessage("selected a Material to be converted to Octane")
    sys.exit(0)


shaders = []
subnet = sel[0].parent()
for node in hou.selectedNodes():
    if 'principledshader::2.0' in node.type().name() :
       shaders.append(node)
       
print(shaders)

for shader in shaders :
    octane_shader = subnet.createNode("octane_vopnet")
    octane_shader.setName(shader.name()+"__OCTANE")
    
    univ = octane_shader.createNode("octane::NT_MAT_UNIVERSAL")
    output = octane_shader.node("octane_material1")
    output.setInput(0, univ)
    
    univ.parm("albedor").set(shader.parm("basecolorr").eval())
    univ.parm("albedog").set(shader.parm("basecolorg").eval())
    univ.parm("albedob").set(shader.parm("basecolorb").eval())
    
    octane_shader.parm("ogl_diffr").set(shader.parm("basecolorr").eval())
    octane_shader.parm("ogl_diffg").set(shader.parm("basecolorg").eval())
    octane_shader.parm("ogl_diffb").set(shader.parm("basecolorb").eval())        
    ]]></script>
  </tool>

  <tool name="copy_materials" label="Copy Materials" icon="hicon:/SVGIcons.index?BUTTONS_material_include.svg">
    <script scriptType="python"><![CDATA[import sys

sel = hou.selectedNodes()

if len(sel) == 0:
    hou.ui.displayMessage("select a OBJ node to extract materials from")
    sys.exit(0)
else : 
    
    copy_to_path = '/mat'
    node = sel[0]
    parms = node.parms()
    materials_dict = {}
    for parm in parms :
        if 'shop_materialpath' in parm.name():
            mat_node = parm.evalAsNode()
            materials_dict[parm.name()] = mat_node     
            
    for key in materials_dict :
        mat_node = materials_dict[key]
        new_mat_node = hou.copyNodesTo([mat_node], hou.node(copy_to_path))
        materials_dict[key] = new_mat_node[0]
        node.parm(key).set(new_mat_node[0].path())
    ]]></script>
  </tool>

  <tool name="place_highlight" label="Place Highlight" icon="hicon:/SVGIcons.index?OBJ_hlight.svg">
    <script scriptType="python"><![CDATA[import hou
import sys
from hou import hmath

from viewerstate.utils import sopGeometryIntersection
class ScrubState(object):
    def __init__(self, scene_viewer, state_name):
        self.state_name = state_name
        self.scene_viewer = scene_viewer
        self._base_x = self._base_frame = None
        self.geos = []

    def onGenerate(self, kwargs):
        self._collect_geometry()
        self.scene_viewer.setPromptMessage(
            "Drag left/right to scrub along timeline"
        )

    def onExit(self, kwargs):
        self.scene_viewer.clearPromptMessage()
        
    def _collect_geometry(self):
        children = hou.node("/obj").children()
        for child in children :
            if child.type().name() == 'geo' :
                self.geos.append(child)
                print(child)

        pass
    def _scrub_abs(self, x):
        # Take the absolute position of the mouse pointer (as a percentage
        # of the total viewer width) and move that far along the current
        # frame range

        width, _ = self.scene_viewer.contentSize()
        pct = x / float(width)
        start_frame, end_frame = hou.playbar.frameRange()
        frame = int((end_frame - start_frame) * pct + start_frame)
        hou.setFrame(frame)

    def _scrub_rel(self, x):
        # Use the difference between the mouse pointer's current position
        # and the previous position to calculate how many frames to move
        # forward/back

        if self._base_x is not None:
            delta = int((x - self._base_x) / 10.0)
            frame = max(0, self._base_frame + delta)
            hou.setFrame(frame)
        else:
            self._base_x = x
            self._base_frame = hou.intFrame()

    
    def onMouseEvent(self, kwargs):
        ui_event = kwargs["ui_event"]
        
        device = ui_event.device()
        if device.isLeftButton():
            ray_origin, ray_dir = ui_event.ray()
            for geo_node in self.geos :

                geo = geo_node.displayNode().geometry()
                new_ray_origin = ray_origin * geo_node.worldTransform().inverted()
                
                intersected, position, normal, uvw = sopGeometryIntersection(geo, new_ray_origin, ray_dir)
                if intersected != -1 :
                    print("hit", geo)
                    print("position : ", position * geo_node.worldTransform())
                    print("normal : ", normal)
                    refl = reflectVector(ray_dir, normal)
                    print(obj_node)
                    transform = hmath.buildTransform({
                        'translate' : refl + position,
                        'rotate' : (0,0,0),
                        'scale' : (1,1,1)
                    })
                    obj_node.setWorldTransform(transform * geo_node.worldTransform())
                    print(transform)
                    return True
                
            return True



def reflectVector(dir, normal) :
    # r=dâ2(d.dot(n))n
    r = dir - 2.0 * (dir.dot(normal)) * normal
    return r
 

sel = hou.selectedNodes()
if len(sel) == 0 :
    hou.ui.displayMessage("select a obj node or light")
    sys.exit(0)
if len(sel) != 1 :
    hou.ui.displayMessage("select one light only")
    sys.exit(0)

obj_node = sel[0]

template = hou.ViewerStateTemplate("scrub", "Scrub", hou.objNodeTypeCategory())
template.bindFactory(ScrubState)

menu = hou.ViewerStateMenu("scrub", "Scrub")
menu.addRadioStrip("mode", "Mode", "rel")
menu.addRadioStripItem("mode", "rel", "Relative")
menu.addRadioStripItem("mode", "abs", "Absolute")
template.bindMenu(menu)

hou.ui.unregisterViewerState("scrub")
hou.ui.registerViewerState(template)

scene_viewer = hou.ui.paneTabOfType(hou.paneTabType.SceneViewer)
scene_viewer.setCurrentState("scrub")
]]></script>
  </tool>

  <tool name="multi_curve_edit" label="Multi Curve Edit Freeze" icon="PLASMA_App">
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>gui2one 2.0</toolSubmenu>
    <script scriptType="python"><![CDATA[import sys
sel = hou.selectedNodes()
def findLastInput(node) :

    if node == None: return None
    
    cur = node
    
    while len(cur.inputs()) != 0:
        
        cur = cur.inputs()[0]
        print("find last child ", cur)
    if cur != node:
        return cur
    else :
        return None

if len(sel) == 1 :
    if sel[0].type().name() == 'edit' :
        edit_node = sel[0]
        
        parent_node = edit_node.inputs()[0]
        parent_type = parent_node.type().name()
        
#        print(parent_type)
        
        if parent_type == 'merge' :
            curve_nodes =  [] #parent_node.inputs()
            for input in parent_node.inputs():
                # bail early if input is a curve sop
                if input.type().name() == "curve" :
                    curve_nodes.append(input)
                    continue
                    
                lastInput = findLastInput(input)
                if lastInput != None:
                    curve_nodes.append(lastInput)
                
        elif parent_type == 'curve' :
            curve_nodes = [parent_node]
             
        geo = edit_node.geometry()
        
        for prim_id, prim in enumerate(geo.prims()) :

            path_str = ""
            for id, pt in enumerate(prim.points()):
                path_str += str(pt.position().x())
                path_str += ","
                path_str += str(pt.position().y())
                path_str += ","
                path_str += str(pt.position().z())+" "
            # print (path_str) 
            curve_nodes[prim_id].parm("coords").set(path_str)
            
        edit_node.parm("clearall").pressButton()
        edit_node.parm("group").set("")

    else : 
        hou.ui.displayMessage("selected a edit sop")
        sys.exit(0)
else : 
    hou.ui.displayMessage("selected a edit sop")
    sys.exit(0)]]></script>
  </tool>

  <tool name="check_duplicate_inputs" label="Check for duplicate inputs" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[for sel in hou.selectedNodes():
    collection = []
    duplicatesIndices =  []
    inputs = sel.inputs()
    
    for i, input in enumerate(inputs):
        if input.name() in collection :
            print "duplicate at index", i
            duplicatesIndices.append(i)
        else : 
            collection.append(input.name())
            

            
    if len(duplicatesIndices) > 0:
        _str = "duplicates at index "
        for entry in duplicatesIndices :
            _str += str(entry)+","
        print _str
    else:
        print "no duplicate found"]]></script>
  </tool>

  <tool name="HipLoader" label="Hip Loader" icon="hicon:/SVGIcons.index?BUTTONS_add_constraints.svg">
    <script scriptType="python"><![CDATA[import subprocess
import os

script_path = os.path.join("D:","CODE","HOUDINI_CONFIG", "hython","HipLoader.py")
print script_path
hcmd_path = os.path.join(hou.expandString('$HFS'),'bin','hcmd.exe')
hython_path = os.path.join(hou.expandString('$HFS'),'bin','hython.exe')
#cmd = hython_path
#cmd += ' '+ script_path
#cmd += ' && PAUSE'

#p = subprocess.Popen(hcmd_path+' -hython ', shell=False, stdin=subprocess.PIPE ,stdout=subprocess.PIPE, stderr=subprocess.PIPE) 
p = subprocess.Popen([hython_path, script_path], shell=False, bufsize=256, stdin=subprocess.PIPE ,stdout=subprocess.PIPE, stderr=subprocess.PIPE) 

output, error = p.communicate(b"communicating .... ' stdin")
rc = p.returncode
#
print "return Code :\n\t", rc
print "\nOUTPUT :\n\t", output
print "\nERROR :\n\t", error]]></script>
  </tool>

  <tool name="osl_reload_script" label="osl reload script" icon="PLASMA_App">
    <toolMenuContext name="network">
      <contextNetType>SHOP</contextNetType>
      <contextNetType>VOP</contextNetType>
      <contextNetType>VOPNET</contextNetType>
    </toolMenuContext>
    <toolSubmenu>gui2one_scripts</toolSubmenu>
    <script scriptType="python"><![CDATA[sel = hou.selectedNodes()

if len(sel) == 1 :
    if sel[0].type().name() == 'octane::NT_TEX_OSL':
    
        parent = sel[0].parent()
        scriptPath = sel[0].parm('A_FILENAME').eval()
        name = sel[0].name()
        conn = sel[0].outputConnections()[0]
        outNode = conn.outputNode()
        inputIndex = conn.inputIndex()
        outputIndex = conn.outputIndex()        
        pos = sel[0].position()
        sel[0].destroy()
        
        newNode = parent.createNode('octane::NT_TEX_OSL', node_name=name)
        newNode.parm('A_FILENAME').set( scriptPath )
        newNode.setPosition( pos)
        
        outNode.setInput( inputIndex , newNode)
#         print conn.inputIndex()
        

        ]]></script>
  </tool>

  <tool name="ffmpeg_render" label="ffmpeg render" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import sys
import os
import subprocess
import re
# C:\Users\gui2one\Downloads\ffmpeg-20170125-2080bc3-win64-static\bin
ffmpegPath =  os.path.join("C:\\","Users","gui2one","Downloads","ffmpeg-20170125-2080bc3-win64-static","bin","ffmpeg.exe")
if not os.path.isfile(ffmpegPath):
    print "bad file"
    ffmpegPath = hou.ui.selectFile(file_type=hou.fileType.Any)
#    print ffmpegPath
    
    

sequencePath  = hou.ui.selectFile(
                                title='Select an image sequence',
                                file_type=hou.fileType.Any, 
                                collapse_sequences=True,
                                pattern="*")  
if sequencePath == '':
    sys.exit(0)

    
basename = os.path.basename(sequencePath)
fileName, ext = os.path.splitext(basename)
## find $F expression
regex = re.compile('\$F\d+', re.IGNORECASE)
to_replace = ''
numZeros = -1
for match in regex.finditer(fileName):
    # print "found -->",match.group(0)
    to_replace = match.group(0)
    numZeros = int(match.group(0).replace('$F',''))
    
dirPath = os.path.dirname(sequencePath)
# print "extension -->",ext
# print "dir path -->",dirPath

fileName = fileName.replace(to_replace,'%0'+str(numZeros)+'d')
fileName += ext

fullSource = os.path.join(dirPath,fileName).replace("\\","/")
# print "ffmpeg Path -->" , ffmpegPath

choice = hou.ui.displayMessage("add a soud file ?", buttons=('OK','Cancel'), close_choice=1, default_choice=1)

soundFile = ''
if choice == 0 : ## means 'ok'
    soundFile = hou.ui.selectFile(start_directory=hou.expandString('$HIP'), pattern="*.wav,*.mp3")
    # print "soundFile -->",soundFile
#sys.exit(0)

commandArray = []
commandArray.append(ffmpegPath)
commandArray.append('-i')
commandArray.append(fullSource)

if soundFile != '':
    commandArray.append('-i')
    commandArray.append(soundFile)   
    
commandArray.append('-b:v')    
commandArray.append('20000k')    
commandArray.append('-c:v')
commandArray.append('libx264')
commandArray.append('-preset')
commandArray.append('veryslow')
commandArray.append('D:/WORK/HOUDINI_16_5_playground/render/robotic_arm/aaa__01.mp4')

# subprocess.call([ffmpegPath, '-i',fullSource,'D:/WORK/HOUDINI_16_5_playground/render/robotic_arm/aaa__01.mp4'])
subprocess.call(commandArray)


print "DONE"]]></script>
  </tool>

  <tool name="add_instance_point" label="Add instance point" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import sys
import toolutils
sceneViewer = toolutils.sceneViewer()
print sceneViewer
if hou.selectedNodes() :
    selection = hou.selectedNodes()[0]
    if selection.type().name() != 'instance' :
        hou.ui.displayMessage("the node must be of 'instance' type");
        sys.exit(0)
    
else : 
    selection = hou.node("/obj/").createNode("instance", "my_pick_node")
    print selection.children()
    

print sceneViewer.isOrientingOnSnap()
sceneViewer.setOrientOnSnap(1)
sceneViewer.selectPositions()[0]

]]></script>
  </tool>

  <tool name="list_parm_templates" label="List Parm templates" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[
if len(hou.selectedNodes()) :
    selection = hou.selectedNodes()[0]
    for entry in selection.parmTemplateGroup().entries():
        print entry.label(),"_____________________________"
        for entry2 in entry.parmTemplates():
            print "\t",entry2
    
]]></script>
  </tool>

  <tool name="find_opened_HDAs" label="find Opened HDAs" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[root = hou.node("/")
print len(root.allSubChildren())

unlockedHDAs = []
for node in root.allSubChildren():

    if node.type().definition() and node.isLockedHDA() == False:
#        print node.path()
        unlockedHDAs.append(node)
        
print len(unlockedHDAs)

print unlockedHDAs[0].path()]]></script>
  </tool>

  <tool name="cam_angle_to_F" label="Cam Angleto F" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import math

def calcCamF(angle, aperture):
    f =  ( aperture / 2.0) / math.tan( math.radians(angle/ 2.0) ) 
    return f
    
res = hou.ui.readMultiInput("enter camera parameters",("angle", "aperture"))

if len(res) > 0:
    params = res[1]
    angle = float(params[0])
    aperture = float(params[1])
    
    f = calcCamF( angle, aperture)
    print "focal length : ", f
    
    if len(hou.selectedNodes()) > 0:
        node = hou.selectedNodes()[0]
        if node.type().name() == 'cam':
            node.parm('focal').set(f)
            node.parm('aperture').set(aperture)
            
    else :
        print "focal length :", f
        print "aperture : ", aperture
        
    ]]></script>
  </tool>

  <tool name="install_HIP_hdas" label="Install $HIP HDAs" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import os

full_path = os.path.join(hou.expandString('$HIP'),"otls")

inc = 0
success_num = 0
failed_num = 0
for item in os.listdir(full_path):
    is_file = os.path.isdir(os.path.join(full_path,item)) == False
    
    if is_file :
        try : 
            hou.hda.installFile(os.path.join(full_path, item))

            success_num += 1
        except :
            print 'oups. problem while installing hda definition:'
            print os.path.join(full_path, item)
            failed_num += 1

        inc += 1

if inc == 0:
    print "-------"
    print "no hda installed"
else :
    print "-------"
    print inc, "definition files found : "
    print success_num, "successfully installed"
    print failed_num, "failed"]]></script>
  </tool>

  <tool name="loadAECamFile" label="Load AE Cam File" icon="hicon:/SVGIcons.index?OBJ_camera.svg">
    <script scriptType="python"><![CDATA[import math
import json


def calcCamF(angle, aperture):
    f =  ( aperture / 2.0) / math.tan( math.radians(angle/ 2.0) ) 
    return f


file = hou.expandString(hou.ui.selectFile(title="select a .cam file", pattern="*.cam"))


SCALE = 0.01;
print hou.expandString(file)
data = ""
with open(file,"r") as f:
    data = f.read()
    
jsonData = json.loads(data)
print len(jsonData)
for item in jsonData:
#    print item['type']
    if item['type'] == "camera":
        node = hou.node("/obj/").createNode("cam")
        node.setName(item['name'].replace(' ','_'), unique_name=True)
        node.parm("resx") .set(float(item["resX"]))
        node.parm("resy") .set(float(item["resY"]))
        
        aperture = float(item["aperture"])
        angle = float(item['angle'])
        node.parm("aperture").set(aperture)
        focal = calcCamF(angle,aperture)
        node.parm("focal").set(focal)        
        
    elif item['type'] == "AVLayer":
        node = hou.node("/obj/").createNode("null")
        node.setName(item['name'].replace(' ','_'), unique_name=True)
        
    for i,frame in enumerate(item['positions']):
        key = hou.Keyframe()
        key.setFrame(i)
        key.setValue(float(frame[0] * SCALE))       
        node.parm("tx").setKeyframe(key)
        
        key = hou.Keyframe()
        key.setFrame(i)
        key.setValue(float(-frame[1] * SCALE))       
        node.parm("ty").setKeyframe(key)        
        
        key = hou.Keyframe()
        key.setFrame(i)
        key.setValue(float(-frame[2] * SCALE))       
        node.parm("tz").setKeyframe(key)
        
    for i,frame in enumerate(item['orientations']):
        key = hou.Keyframe()
        key.setFrame(i)
        key.setValue(float(frame[0]))       
        node.parm("rx").setKeyframe(key)
        
        key = hou.Keyframe()
        key.setFrame(i)
        key.setValue(-float(frame[1]))       
        node.parm("ry").setKeyframe(key)        
        
        key = hou.Keyframe()
        key.setFrame(i)
        key.setValue(-float(frame[2]))       
        node.parm("rz").setKeyframe(key)    
        
        ]]></script>
  </tool>

  <tool name="change_uv_display" label="Change UV Display" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import toolutils

viewer = toolutils.sceneViewer()
vp = viewer.curViewport()
content = dir( vp )

list = ['uv','uv2','uv3','uv4','uv5','uv6','uv7','uv8','uv9','uv10']
choice = hou.ui.selectFromList(list, clear_on_cancel = True)
settings = vp.settings()

if len(choice) != 0:
    settings.setUVDisplayAttribute(list[choice[0]])
#for entry in content:
#    print entry]]></script>
  </tool>

  <tool name="pop render view" label="Pop Render View" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[desk = hou.ui.curDesktop()

foundIPR = False

for pane in desk.panes():
    for tab in pane.tabs():
        if tab.type() == hou.paneTabType.IPRViewer:
            print "ipr viewer found"
            tab.setIsCurrentTab()
            foundIPR = True
            
for panel in hou.ui.floatingPanels():
    for tab in panel.paneTabs():
        if tab.type() == hou.paneTabType.IPRViewer:
            print "ipr viewer found 2"
            print tab.name()
            tab.setIsCurrentTab()
            foundIPR = True            
            
if not foundIPR:
    IPR = desk.createFloatingPanel(hou.paneTabType.IPRViewer)
    IPR.setName('mantra ipr')
            ]]></script>
  </tool>

  <tool name="add_ogl_params" label="Add OGL Params" icon="hicon:/SVGIcons.index?BUTTONS_list_add.svg">
    <toolMenuContext name="network">
      <contextNetType>SHOP</contextNetType>
      <contextNetType>VOP</contextNetType>
      <contextNetType>VOPNET</contextNetType>
    </toolMenuContext>
    <toolSubmenu>gui2one_scripts</toolSubmenu>
    <script scriptType="python"><![CDATA[
sel = hou.selectedNodes()

for node in sel:
    if node.type().name() == 'materialbuilder' or node.type().name() == 'octane_vopnet' :
        # print("ok")
        
        existingParms = node.parmTemplateGroup()
        # print(existingParms)
        group = hou.ParmTemplateGroup()
        folder = hou.FolderParmTemplate("ogl_parms","OGL")
            
        folder.addParmTemplate( hou.StringParmTemplate("ogl_tex1","texture 1",1, string_type=hou.stringParmType.FileReference))
        folder.addParmTemplate( hou.StringParmTemplate("ogl_texuvset1","uv set 1",1, string_type=hou.stringParmType.Regular))
        
        
        
        texWrapMenu = hou.MenuParmTemplate('ogl_tex_wrap1','Texture Wrap',menu_items=(["repeat","clamp","decal","mirror"]), menu_labels=(["Repeat","Streak","Decal","Mirror"]))
        folder.addParmTemplate(texWrapMenu)
        
        existingParms.append(folder)
        try:
            node.setParmTemplateGroup( existingParms )
        except hou.OperationFailed:
            # print ("Params already present ?")
            pass
         
            
        ## now try and find a texture in the material network
        for child in node.children():
            if child.type().name() == 'collect':
                print ("found")
                for input in child.inputs():
                    print (input)
                    if input.type().name() == 'output':
                        print ("found output")
                        
        ]]></script>
  </tool>

  <tool name="find_opened_definition" label="Find Opened Definition" icon="PLASMA_App">
    <toolMenuContext name="network">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
      <contextNetType>CHOP</contextNetType>
      <contextNetType>ROP</contextNetType>
      <contextNetType>SHOP</contextNetType>
      <contextNetType>COP2</contextNetType>
      <contextNetType>VOP</contextNetType>
      <contextNetType>VOPNET</contextNetType>
      <contextNetType>DOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>gui2one_scripts</toolSubmenu>
    <script scriptType="python"><![CDATA[selection = hou.selectedNodes()


if len(selection) == 0:
    hou.ui.displayMessage("select an asset of whitch type you want to find opened definitions ")
else : 
    assetTypeName = selection[0].type().name()
    foundNum = 0
    for node in hou.node('/').allSubChildren():
        if node.type().name() == assetTypeName:
            if node.isEditable() :
                print node.isEditable() ,'--->', node.path()
                foundNum += 1
    if foundNum == 0 :
        print "no opened definition found for asset type ",assetTypeName]]></script>
  </tool>

  <tool name="read_AE_data" label="Read AE Data" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[file = hou.ui.selectFile("$HIP/",title = "choose .txt file", pattern="*.txt")
print file

with open(file,'rU') as f:
    for line in f:
        line_data = line.replace("\t","").replace("\n","").replace("\r","")
        if line_data != "":
            print line_data]]></script>
  </tool>

  <tool name="HtoAE_V3" label="HtoAE V3" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import json
import math
import os

### functions
def isZoomTimeDependent(cam):
    parmList = [ 'focal', 'aperture']
    
    for parm in parmList:
        if cam.parm(parm).isTimeDependent():
            return True
            
    return False

def getCamZoomAtFrame(cam, frame=1):
    resx = cam.parm('resx').evalAtFrame(frame)
    resy = cam.parm('resy').evalAtFrame(frame)
    aspect = cam.parm('aspect').evalAtFrame(frame)
    aperture = cam.parm('aperture').evalAtFrame(frame)
    focal = cam.parm('focal').evalAtFrame(frame)
    fovx = 2 * math.atan((aperture/2)/focal) 
    zoom = ((resx/2)/math.tan(fovx/2)) 
    
    return zoom

def getTransformsAtFrame(obj, frame=1):
    hou.setFrame(frame)
    name = obj.name()
    objType = obj.type().name()
    wtm = obj.worldTransform()
    objt = wtm.extractTranslates("srt")
    tx = objt.__getitem__(0)
    ty = objt.__getitem__(1) * -1
    tz = objt.__getitem__(2) * -1
    objr = wtm.extractRotates("srt","zyx")
    rx = objr.__getitem__(0)
    ry = objr.__getitem__(1) * -1
    rz = objr.__getitem__(2) * -1
    
    return([tx,ty,tz], [rx,ry,rz])
        
        
### actual code 

sel = hou.selectedNodes()

tStart = int(hou.expandString('$RFSTART'))
tEnd = int(hou.expandString('$RFEND'))

nodes = {}

cam = None

for node in sel:
    if node.type().name() == 'cam':
        cam = node
        break

        
### file selection 
dirPath = hou.expandString('$HIP')
fileName = hou.ui.selectFile( start_directory = dirPath,
        default_value = "%s_export.h2ae" % (cam.name()),
        file_type = hou.fileType.Any,
        collapse_sequences = False,
        multiple_select = False,
        image_chooser   = False)
        
print fileName

data = {}
compInfos = {}
compInfos["name"] = cam.name()
compInfos["resx"] = cam.parm('resx').eval()
compInfos["resy"] = cam.parm('resy').eval()    
compInfos["fps"] = hou.fps()
compInfos["fStart"] = hou.expandString('$RFSTART')   
compInfos["fEnd"] = hou.expandString('$RFEND')

data["compInfos"] = compInfos

for node in sel:

    
    infos = {}
    if node.type().name() == 'cam' :
    
        camInfos = {}
        if not isZoomTimeDependent(node):
            camInfos["zoom"] = [getCamZoomAtFrame(node)]
            infos["camInfos"] = camInfos
            
        else:
            zoom = []
            for i in range(tStart, tEnd+1):
                zoom.append(getCamZoomAtFrame(node,i))
            camInfos["zoom"] = zoom
            infos["camInfos"] = camInfos
        
   
        
    positions = []
    rotations = []    
    
    if node.isTimeDependent() :
        for i in range(tStart, tEnd+1):
            pos, rot = getTransformsAtFrame(node,i)
            positions.append(pos)
            rotations.append(rot)
    else:
        pos, rot = getTransformsAtFrame(node)
        positions.append(pos)
        rotations.append(rot)        
        
    infos["positions"] = positions 
    infos["rotations"] = rotations
    nodes[node.name()] = infos

data["layers"] = nodes
    

    
    
jsonData = json.dumps(data, sort_keys=True, indent=4, separators=(',', ': '))
# jsonData = json.dumps(nodes)

with open(fileName,'w') as f:
    #json.dump(data,f, sort_keys=True, indent=4, separators=(',', ': '))
    json.dump(data, f, sort_keys=True)

print 'just written a file at : ', fileName


]]></script>
  </tool>

  <tool name="octane_ROP_preview" label="Octane Rop Preview" icon="hicon:/SVGIcons.index?BUTTONS_capture.svg">
    <toolMenuContext name="network">
      <contextNetType>ROP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[sel = hou.selectedNodes()
if len(sel) != 0:
    copiedNodes = hou.copyNodesTo((sel[0],), sel[0].parent())
    
    previewRop = copiedNodes[0]
    previewRop.setName(sel[0].name()+"_preview")
    previewRop.moveToGoodPosition()
    previewRop.setColor( hou.Color((255,0,0)))
    
    
    
    previewRop.parm("HO_overrideCameraRes").set(1)
    previewRop.parm("HO_overrideResScale").set(2)
    
    
    mainTake = hou.takes.rootTake()
    preview = mainTake.addChildTake("preview")
    
    
    hou.takes.setCurrentTake(preview)
    
    renderTarget = hou.node(sel[0].parm("HO_renderTarget").evalAsString())
    
    
    
    
    samplesParms = renderTarget.parmTuple("maxsamples")
    samplesParms2 = renderTarget.parmTuple("maxsamples2")
    samplesParms3 = renderTarget.parmTuple("maxsamples3")
    samplesParms4 = renderTarget.parmTuple("maxsamples4")
    #print samplesParms[0] 
    preview.addParmTuple(samplesParms)
    preview.addParmTuple(samplesParms2)
    preview.addParmTuple(samplesParms3)
    preview.addParmTuple(samplesParms4)
    
    
    samplesParms.set((500,))
    samplesParms2.set((500,))
    samplesParms3.set((500,))
    samplesParms4.set((500,))
    
    hou.takes.setCurrentTake(mainTake)
    
    previewRop.parm("take").set("preview")
]]></script>
  </tool>

  <tool name="write_raw_file_V2" label="write raw file V2" icon="hicon:/SVGIcons.index?SOP_heightfield_file.svg">
    <script scriptType="python"><![CDATA[import struct 
import math
import os

def writeRawFile(filePath, height_field, minVal, maxVal):

    print "write file:", filePath
    data = ""
    for v in height_field.allVoxels():
        val =  hou.hmath.fit(v, minHeight, maxHeight,0.0,1.0)
        val = int(math.ceil( val * (((2**16)-1) - (2**15))))
        data += (struct.pack("@h",val))
        
    f = open(filePath, "wb")
    f.write(data)
    f.close()

def findPrim(baseSop, primName):
    prims = baseSop.geometry().prims()
    
    for i,prim in enumerate(prims):
        if prim.attribValue("name") == primName:
            #print "found height prim at prim #", i
            return prim
    
    return -1
    

def exportPrim( height_field_prim, num_tiles = 1):
    if height_field_prim == -1:
        print "prim not found"
        return -1
    print "exporting :",height_field_prim
    heightField = height_field_prim
    
    minVal = heightField.volumeMin()
    maxVal = heightField.volumeMax()
    
    print "minHeight :", minHeight
    print "maxHeight :", maxHeight
    
    if tileChoice == 0:
        filePath = hou.ui.selectFile("","select a file",pattern="*.raw")
        writeRawFile(filePath, heightField, minVal, maxVal)
    elif tileChoice != 0:    
        filePath = hou.ui.selectFile("","select a file",pattern="*.raw")
        tileNode.parm("tilecountx").set( tileChoice+1)
        tileNode.parm("tilecounty").set( tileChoice+1)    
        tileNode.parm("voxelpad").set(1)    
        for i in range(0, (tileChoice+1)**2):
            print "tile number ",i+1
            
            tileNode.parm("tilenum").set(i)
            heightField = tileNode.geometry().prims()[0]
            
            baseName, ext  = os.path.splitext(filePath)
            print baseName
            writeRawFile(baseName+ str(i)+ ext, heightField,  minVal, maxVal)
    
    
choices = ("no tiles","2 by2", "3 by 3", "4 by 4")


tileChoice = hou.ui.selectFromList(choices,default_choices=(0,), exclusive=False)[0]



baseHeightField = hou.selectedNodes()[0]





#print "flowPrim :", flowPrim

tileNode = baseHeightField.parent().createNode("heightfield_tilesplit")
tileNode.setInput(0,baseHeightField)
tileNode.setDisplayFlag(True)
tileNode.setTemplateFlag(True)
tileNode.setRenderFlag(True)
tileNode.moveToGoodPosition()

exportPrim(findPrim(baseHeightField, 'height'))
    



]]></script>
  </tool>

  <tool name="write_raw_file" label="write raw file" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import struct 
import math
import os

def writeRawFile(filePath, height_field, numTiles=1):

    print "write file:", filePath
    data = ""
    for v in height_field.allVoxels():
        val =  hou.hmath.fit(v, minHeight, maxHeight,0.0,1.0)
        val = int(math.ceil( val * (((2**16)-1) - (2**15))))
        data += (struct.pack("@h",val))
        
    
    
    
    
    f = open(filePath, "wb")
    f.write(data)
    f.close()

def findPrim(baseSop, primName):
    prims = baseSop.geometry().prims()
    
    for i,prim in enumerate(prims):
        if prim.attribValue("name") == primName:
            #print "found height prim at prim #", i
            return prim
    
    return -1
    
    
choices = ("no tiles","2 by2", "3 by 3", "4 by 4")


tileChoice = hou.ui.selectFromList(choices,default_choices=(0,), exclusive=False)[0]



baseHeightField = hou.selectedNodes()[0]

heightPrim = findPrim(baseHeightField, 'height')
print "heightPrim :", heightPrim

flowPrim = findPrim(baseHeightField, 'flow')
print "flowPrim :", flowPrim

tileNode = baseHeightField.parent().createNode("heightfield_tilesplit")
tileNode.setInput(0,baseHeightField)
tileNode.setDisplayFlag(True)
tileNode.setTemplateFlag(True)
tileNode.setRenderFlag(True)
tileNode.moveToGoodPosition()
    


heightField = baseHeightField.geometry().prims()[0]

minHeight = heightField.volumeMin()
maxHeight = heightField.volumeMax()

print "minHeight :", minHeight
print "maxHeight :", maxHeight

if tileChoice == 0:
    filePath = hou.ui.selectFile("","select a file",pattern="*.raw")
    writeRawFile(filePath, heightField)
elif tileChoice != 0:    
    filePath = hou.ui.selectFile("","select a file",pattern="*.raw")
    tileNode.parm("tilecountx").set( tileChoice+1)
    tileNode.parm("tilecounty").set( tileChoice+1)    
    tileNode.parm("voxelpad").set(1)    
    for i in range(0, (tileChoice+1)**2):
        print "tile number ",i+1
        
        tileNode.parm("tilenum").set(i)
        heightField = tileNode.geometry().prims()[0]
        
        baseName, ext  = os.path.splitext(filePath)
        print baseName
        writeRawFile(baseName+ str(i)+ ext, heightField)
    

]]></script>
  </tool>

  <tool name="read_raw_file" label="read raw file" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import struct
import math
file = hou.ui.selectFile("","select Raw Height file",pattern="*.raw")
# print file

bytesArray = []


with open(file, "rb") as f:
    while True:
        chunk = f.read(2)
        if chunk:
            bytesArray.append((struct.unpack(">h",chunk))[0])
        else:
            break

            
print math.sqrt(len(bytesArray))
# example:
#for b in bytesArray:
#    height = 
#    if  height != 0 :
#        print height


]]></script>
  </tool>

  <tool name="import_AE3D_cam" label="import AE3D camera" icon="hicon:/SVGIcons.index?CHOP_voicesplit.svg">
    <script scriptType="python"><![CDATA[cam = hou.node("/obj/").createNode("cam")

msFile = hou.ui.selectFile("Select ms file", pattern="*.ms")

f = open(msFile,"r")


data = f.readlines()

f.close()

framesArray = []
positions = []
rotations = []
for line in data :
    

    targetString = "at time"
    if targetString in line:
        frameNum = int( line[len(targetString)+1 : ].split(" ")[0])
        
        hou.setFrame( frameNum )
        if not frameNum in framesArray :
            framesArray.append(frameNum)
            rotation = []
            #print "\nFrame :", frameNum, "\n -----------------------------"
            
        if "x_rotation" in line:
            val = float(line.split(" = ")[1].strip("\n"))
            rotation.append(val)
            #print "rotation X : ", val
            
        elif "y_rotation" in line:
            val = float(line.split(" = ")[1].strip("\n"))
            rotation.append(val)
            #print "rotation Y : ", val
            
        elif "z_rotation" in line:
            val = float(line.split(" = ")[1].strip("\n"))
            rotation.append(val)
            rotations.append(rotation)
            #print "rotation Z : ", val
            
        elif ".pos" in line:
            posArray = line.split(" = ")[1].strip("\n").strip("[").strip("]").split(",")
            
            for i,item in enumerate(posArray):
                posArray[i] = float(item)
            position = posArray    
            positions.append(position)

#print rotations

# # after grabbing data, we create keyframes    
TX = []
TY = []
TZ = []

RX = []
RY = []
RZ = []
for i, frameNum in enumerate(framesArray):

    key = hou.Keyframe()
    key.setFrame( frameNum )
    key.setValue(positions[i][0])
    TX.append(key)
    
    key = hou.Keyframe()
    key.setFrame( frameNum )
    key.setValue(positions[i][1])
    TY.append(key)
    
    key = hou.Keyframe()
    key.setFrame( frameNum )
    key.setValue(positions[i][2])
    TZ.append(key)    
    
    key = hou.Keyframe()
    key.setFrame( frameNum )
    key.setValue(rotations[i][0])
    RX.append(key)   
    
    key = hou.Keyframe()
    key.setFrame( frameNum )
    key.setValue(rotations[i][1])
    RY.append(key)     
    
    key = hou.Keyframe()
    key.setFrame( frameNum )
    key.setValue(rotations[i][2])
    RZ.append(key)     
    
    
cam.parm("tx").setKeyframes( TX )    
cam.parm("ty").setKeyframes( TY )    
cam.parm("tz").setKeyframes( TZ )    

cam.parm("rx").setKeyframes( RX )    
cam.parm("ry").setKeyframes( RZ )    
cam.parm("rz").setKeyframes( RY )    
#print TX    
    
    
    
    
    
    
    
    
    
]]></script>
  </tool>

  <tool name="bake_keyframes" label="bake keyframes" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import sys
sel = hou.selectedNodes()
if len(sel) == 0:
    hou.ui.displayMessage("select a node with animted channel(s)")
    sys.exit()
  


def bakeKeyframes(node):
    animatedParms = [] 
    
    frameRange = range(int(hou.expandString('$RFSTART')), int(hou.expandString('$RFEND'))+1,1)
    
#    print frameRange

    obj = node
    print obj.name()
    
    bakeNull = hou.node("/obj/").createNode("null")
    print hou.node("baking_null_"+ obj.name())
    if hou.node("/obj/baking_null_"+ obj.name()) != None:
        print "hey"
        hou.node("/obj/baking_null_"+ obj.name()).destroy()
    bakeNull.setName("baking_null_"+ obj.name())
    bakeNull.moveToGoodPosition()    
    
    for parm in obj.parms():
        if len(parm.keyframes()) > 1:
            animatedParms.append(parm)
            
    print animatedParms
    
    
    keyframes_TX = []
    keyframes_TY = []    
    keyframes_TZ = []   
    
    keyframes_RX = []
    keyframes_RY = []    
    keyframes_RZ = []        
    
    for i in frameRange:
    
        time = float(i-1) / hou.fps()
       
        tr = obj.worldTransformAtTime( time ).extractTranslates()        
#        print i, " ----- " , tr.x()
        key = hou.Keyframe()
        key.setTime(time)
        key.setValue(tr.x())
        keyframes_TX.append(key)
        
        key = hou.Keyframe()
        key.setTime(time)
        key.setValue(tr.y())
        keyframes_TY.append(key)     
        
        key = hou.Keyframe()
        key.setTime(time)
        key.setValue(tr.z())
        keyframes_TZ.append(key)         
        
        
        rot = obj.worldTransformAtTime( time ).extractRotates()
        
        key = hou.Keyframe()
        key.setTime(time)
        key.setValue(rot.x())
        keyframes_RX.append(key)
        
        key = hou.Keyframe()
        key.setTime(time)
        key.setValue(rot.y())
        keyframes_RY.append(key)     
        
 
        key = hou.Keyframe()
        key.setTime(time)
        key.setValue(rot.z())
        keyframes_RZ.append(key)          

        
    # print keyframes_TX
    
    bakeNull.parm("tx").setKeyframes( keyframes_TX )
    bakeNull.parm("ty").setKeyframes( keyframes_TY )
    bakeNull.parm("tz").setKeyframes( keyframes_TZ )    
    
    bakeNull.parm("rx").setKeyframes( keyframes_RX )
    bakeNull.parm("ry").setKeyframes( keyframes_RY )
    bakeNull.parm("rz").setKeyframes( keyframes_RZ )        
    
    
    
    ## transfer keyframes to original object
    ## unparent before
    
    
    
    obj.parm("tx").deleteAllKeyframes()
    obj.parm("tx").setKeyframes(keyframes_TX)
    
    obj.parm("ty").deleteAllKeyframes()
    obj.parm("ty").setKeyframes(keyframes_TY)    
    
    obj.parm("tz").deleteAllKeyframes()
    obj.parm("tz").setKeyframes(keyframes_TZ)        
    
    obj.parm("rx").deleteAllKeyframes()
    obj.parm("rx").setKeyframes(keyframes_RX)  
    
    obj.parm("ry").deleteAllKeyframes()
    obj.parm("ry").setKeyframes(keyframes_RY)     
    
    obj.parm("rz").deleteAllKeyframes()
    obj.parm("rz").setKeyframes(keyframes_RZ)   
    
    obj.setInput(0,None)
    
bakeKeyframes(sel[0])]]></script>
  </tool>

  <tool name="edges_to_curve" label="Edges To Curve" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import toolutils
import sys        
selection = toolutils.sceneViewer().selectGeometry()
selStr = selection.selectionStrings()


curveNodes = []
if selStr.__len__() == 0:
    print "no selection"
else:    
    #print "-----------------------"
    #print "selection :", selection
    nodes = selection.nodes()
    curSop = nodes[0]
    
    
    
    if selection.geometryType() == hou.geometryType.Edges:    
        segs = selStr[0].split(' ')   
        for seg in segs:
            #print "Seg :",seg
            curveNode = curSop.parent().createNode("curve")
            curveStr = ''
            pts = str(seg)[1:].split('-')
            pattern = ''
            for pt in pts:
                pattern += pt+' '
                curveStr += str(curSop.geometry().freeze().points()[int(pt)].position().x()) + ","
                curveStr += str(curSop.geometry().freeze().points()[int(pt)].position().y()) + ","
                curveStr += str(curSop.geometry().freeze().points()[int(pt)].position().z()) + " "

            
            curveNode.parm("coords").set(curveStr)
            curveNodes.append(curveNode)
            
        if len(curveNodes) > 1:
            mergeNode = curSop.parent().createNode('merge')
            for i,node in enumerate(curveNodes):
                mergeNode.setInput(i, node)
]]></script>
  </tool>

  <tool name="find_materials" label="Find Materials" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import soptoolutils
import toolutils
import os

sel = hou.selectedNodes()
shops = []
parmsDir = {}
for item in sel:
    #print "exploring : ", item.name()
    matParm = item.parm("shop_materialpath")
    objMat = matParm.eval()
    if objMat != "":
        shopPath = matParm.eval()
        #check if already a relative path
        if shopPath[:1] != "." :
            if shopPath != "" and not hou.node(shopPath) in shops:
                
                shops.append(hou.node(shopPath))
                parmsDir[ len(parmsDir)] = [matParm , shops.__len__()-1, item.path()]                        
                
            elif shopPath != "" :
                parmsDir[ len(parmsDir)] = [matParm , shops.__len__()-1, item.path()]
        
    children = item.glob("*")
    
    for child in children:
        if child.type().name() == "material":
            #print "\t-found Material sop : ", child.path()
         
            for i in range(child.parm("num_materials").eval()):
                shopPath = child.parm("shop_materialpath"+str(i+1)).eval()
                
                #check if already a relative path
                if shopPath[:1] != "." :                
                
                
                    if shopPath != "" and not hou.node(shopPath) in shops:
                        
                        shops.append(hou.node(shopPath))
                        parmsDir[ len(parmsDir)] = [child.parm("shop_materialpath"+str(i+1)) , shops.__len__()-1, child.path()]                        
                        
                    elif shopPath != "":
                        parmsDir[ len(parmsDir)] = [child.parm("shop_materialpath"+str(i+1)) , shops.__len__()-1, child.path()]
print shops 
#choices = []
#for item in shops:
#    choices.append(item.path())
#    
#choice = hou.ui.selectFromList(choices)

inc = 0
for entry in parmsDir:

    currentPath =  parmsDir[entry][0].eval()
    targetNode = hou.node(currentPath)
    
    currentNodePath = parmsDir[entry][2]
    
    #hou.cd(os.path.dirname(parmsDir[entry][2]))
    
    relativePath = hou.node(currentNodePath).relativePathTo(targetNode)

    print inc,currentNodePath,relativePath
    
    
    parmsDir[entry][0].set(relativePath)
    inc += 1
 
print parmsDir
                            
                
    ]]></script>
  </tool>

  <tool name="Cop_detect_passes" label="COP detect passes" icon="hicon:/SVGIcons.index?BUTTONS_add_image.svg">
    <toolMenuContext name="network">
      <contextOpType>/img</contextOpType>
      <contextNetType>COP2</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[import os
import re
import sys

file = hou.ui.selectFile("",pattern="*")

if file == "":
    sys.exit(0)
    
ext = os.path.splitext(file)[1]

#print "extension :", ext

filePath = hou.expandString(file)

dirName = os.path.dirname(filePath)

allFiles = os.listdir(dirName)

imgFiles = []

listTitles = []

listNumFrames = []

for f in allFiles :
    if not os.path.isdir(os.path.join(dirName,f)):   
        
        if os.path.splitext(f)[1] == ext :
            imgFiles.append(f)
            regex = re.compile('\d+', re.IGNORECASE)
            
            startId = -1
            digits = ""
            for match in regex.finditer(f):
                if match.start() > startId :
                    startId = match.start()
                    digits = match.group(0)
                # print "%s: %s" % (match.start(), f)  
                
            # print "startId :",startId,"digits :", digits, "file :",f
            # mo = re.findall('\d+', f)
            strippedStr = f.replace(digits,"$F4")
            
            if not strippedStr in listTitles:
            
                listTitles.append( strippedStr )
                

                


imgNode = hou.node("/img/").createNode("img")
print dirName
copnetName = os.path.basename(filePath)
print "copnetName : ", copnetName
imgNode.setName(copnetName,  unique_name = True)
imgNode.moveToGoodPosition()


choices = hou.ui.selectFromList(listTitles)
if len(choices) == 0 :
    imgNode.destroy()
    sys.exit(0)
    
fileNodes = []
for choice in choices:
    # print "choice :",choice
    fileNode = imgNode.createNode("file")
    fileNode.setName( os.path.basename( os.path.join(dirName, hou.expandString(listTitles[choice]))), unique_name = True)
    
    fileName = os.path.join(dirName, listTitles[choice])
    fileNode.parm("filename1").set(fileName.replace("\\","/"))
    
    fileNodes.append(fileNode)
    # print listTitles[choice]

last = fileNodes[0]
for i in range(len(fileNodes)-1) :
#    print fileNodes[i]
    addNode = imgNode.createNode("add")
    addNode.setFirstInput(last)
    addNode.setInput(1,fileNodes[i+1])    
    
    last = addNode
    
    
    
    
    
    
    
    
    
    
    
    ]]></script>
  </tool>

  <tool name="copy_textures" label="Copy Textures" icon="hicon:/SVGIcons.index?BUTTONS_add_image.svg">
    <script scriptType="python"><![CDATA[import os
import shutil


chosenPath = hou.ui.selectFile("","select a folder to copy file into", file_type=hou.fileType.Directory)
hipPath = hou.expandString(chosenPath)
print os.path.abspath(hipPath)
print chosenPath

sel = hou.selectedNodes()

filesToCopy = []
linksDict = {}

for node in sel:
    for child in node.children():
    
        if child.type().name() == "octane::NT_TEX_IMAGE" or child.type().name() == "octane::NT_TEX_FLOATIMAGE" or child.type().name() == "octane::NT_TEX_ALPHAIMAGE":
    
            filePath = child.parm("A_FILENAME").eval()
            
            if not filePath in filesToCopy:
                filesToCopy.append(filePath)
            
    #print filesToCopy
    
    ### copy files to chosen directory
    for file in filesToCopy:
        shutil.copy2(file, hipPath)
        linksDict[ file ] = str(hipPath)+ str(os.path.basename(file))
        
        
    
    
    ### loop back through texture node in octane network to update image file paths
    for child in node.children():
    
        if child.type().name() == "octane::NT_TEX_IMAGE" or child.type().name() == "octane::NT_TEX_FLOATIMAGE" or child.type().name() == "octane::NT_TEX_ALPHAIMAGE":
            filePath = child.parm("A_FILENAME").eval()
            
            expandedHipString = hou.expandString("$HIP")
            newPath = linksDict[filePath].replace( expandedHipString, "$HIP")
            child.parm("A_FILENAME").set(newPath)
        
    
    
    
    
    
    ]]></script>
  </tool>

  <tool name="dof_null_V2" label="DOF V2" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[if hou.selectedNodes().__len__() == 1:
    selectedNode = hou.selectedNodes()[0]
    if selectedNode.type().name() == 'cam' :
        cam = selectedNode
        
        if cam.parm('dof_target') == None :
            group = cam.parmTemplateGroup()
            
            template = hou.StringParmTemplate('dof_target','dof target',1)
            template.setStringType(hou.stringParmType.NodeReference)
            
            trans= group.findFolder('Transform')
            group.insertBefore(trans,template)
            
            cam.setParmTemplateGroup(group)
        
            

        nullNode = cam.parent().createNode('null')
        nullNode.setName('dof_null_'  + cam.name())
        nullNode.setPosition( cam.position() - hou.Vector2(0,1))
        nullNode.parmTuple('dcolor').set((0.8,0,0))
        nullNode.parm("geoscale").set(0.3)
        nullNode.parm("displayicon").set(2)
        nullNode.parm("controltype").set(5)        
        nullNode.parm("shadedmode").set(1)            
        
        cam.parm('dof_target').set(nullNode.path())
        
        expr = 'cam = hou.node(".")'
        expr +='\ncamPos = cam.worldTransform().extractTranslates()'
        expr +='\ndofNull = hou.node(cam.parm("dof_target").evalAsString())'
        expr +='\nif dofNull:'
       
        expr +='\n\tdofNullPos = dofNull.worldTransform().extractTranslates()'        
        expr +='\n\treturn camPos.distanceTo(dofNullPos)'    
        expr += '\nelse:'
        expr +='\n\treturn 5.0'
        expr +='\n'
      
        
        cam.parm('focus').setExpression(expr,language=hou.exprLanguage.Python)

        
    else:
        hou.ui.displayMessage("select a camera node")
else:
    hou.ui.displayMessage("select only one camera node")]]></script>
  </tool>

  <tool name="place_obj" label="Place Obj" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[sel = hou.selectedNodes()[0]

for pane in hou.ui.curDesktop().panes():
    for tab in pane.tabs():
        if tab.type() == hou.paneTabType.SceneViewer :

            sceneViewer = tab
            break
    
newPos = sceneViewer.selectPositions()[0]

sel.parm("tx").set(newPos.x())
sel.parm("ty").set(newPos.y())
sel.parm("tz").set(newPos.z())]]></script>
  </tool>

  <tool name="shader_preview" label="shader preview" icon="PLASMA_App">
    <toolMenuContext name="network">
      <contextOpType>mat</contextOpType>
      <contextNetType>SHOP</contextNetType>
      <contextNetType>VOPNET</contextNetType>
    </toolMenuContext>
    <toolSubmenu>gui2one_scripts</toolSubmenu>
    <script scriptType="python"><![CDATA[

selected = hou.selectedNodes()[0]

nodeType = selected.type().name()


typeOk = False
if nodeType.find("octane") != -1:
    typeOk = True
else:
    typeOk = False

    
print "typeOk : ", typeOk


### delete existing shaderBall_scene
try : 
    hou.node("/obj/gui2one_shaderball_scene1/").destroy()
except:
    pass
    
if typeOk:
    shaderScene = hou.node('/obj').createNode('gui2one_shaderball_scene')
    shaderScene.parm("shop_materialpath_shell").set(selected.path())
    
    shaderScene.parm("show_params_button").pressButton()
    
    shaderScene.parm("openIPR").pressButton()]]></script>
  </tool>

  <tool name="freeze_curve_edit" label="freeze_curve_edit" icon="PLASMA_App">
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[import sys

selection = hou.selectedNodes()
if selection.__len__() == 0:
    hou.ui.displayMessage("select a edit sop node")
    sys.exit(0)

#print 'selected node : ',selection[0].name()
#print selection[0].inputs()[0].parm('coords').evalAsString()
geo = selection[0].geometry()

pointsString = ''

for point in geo.points():
    pointsString += '%s,%s,%s ' % (point.position()[0], point.position()[1], point.position()[2])
    
#print pointsString

recursiveInputs =  selection[0].inputAncestors()

for node in recursiveInputs:
    if node.type().name() == 'curve':
        curveNode = node
        break

if curveNode != None:
    #print 'curve Node is --> ', curveNode
    #newCurveNode = curveNode.parent().createNode('curve')
    curveNode.parm('coords').set(pointsString)
    
selection[0].destroy()]]></script>
  </tool>

  <tool name="obj_export" label="obj_export" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[folderPath = hou.ui.selectFile(title = "choose a folder")

selection = hou.selectedNodes()

objNodes = []
objDict = {}
for obj in selection :
    if obj.type().name() == 'geo':
        objNodes.append(obj)
        objDict[obj] = obj.name()
    elif obj.type().name() == 'subnet':
        for child in obj.children():
            if child.type().name() == 'geo': 
                objNodes.append(child)     
                objDict[child] = obj.name()+"__"+child.name()                
                
                
for item in objDict:
    obj = item
    print obj
#for obj in objNodes:
for item in objDict:
    obj = item
    objName = objDict[item]


    sopNode = obj.displayNode()
    geo = sopNode.geometry()  
    fileName = folderPath+objName+".xml"
    ptPosString = ''
    ptUvString = ''
    for pt in geo.points():
        pt_x = pt.position()[0]
        pt_y = pt.position()[1]
        pt_z = pt.position()[2]
        
        strToAdd = ('%s %s %s' %(pt_x*-1, pt_y, pt_z))
        ptPosString += strToAdd   
        ptPosString += "  "
        
#        pt_uvs = pt.attribValue("uv")
#        pt_uv_x = pt_uvs[0]
#        pt_uv_y = pt_uvs[1]
#        pt_uv_z = pt_uvs[2]
#        
#        ptUvString += ('%s %s %s' %(1-pt_uv_x, 1-pt_uv_y,0.0)) 
#        ptUvString += "  "    
        
        
    nvertsString = ''
    vertsString = ''
    
    for prim in geo.prims():
        nvertsString += str(len(prim.vertices()))+ " "
        for vert in prim.vertices():
            vertsString += str(vert.point().number())+" "
        vertsString += "  "
    
    strExport =  '<?xml version="1.0" ?>\n'
    strExport += '<cycles>\n'
    strExport += '<mesh P='
    strExport += ('"%s"' % ptPosString)
#    strExport += (' UV="%s"' % ptUvString)
    strExport += (' nverts="%s"' % nvertsString)
    
    strExport += (' verts="%s"' % vertsString)
    strExport += '/>\n'
    strExport += '</cycles>'
    

    f = open(("%s" % (fileName)),"w")
    f.write(strExport)
    f.close()
    
    print ("Export Succeeded for %s"% (objName))]]></script>
  </tool>

  <tool name="find reference" label="find reference" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import sys


inc = 0
paramsCounter = 0
nuggetsFound = []

r = hou.ui.readInput("node name to search :")
#r = (0,"OUT_oriented_tree_wires")
searchTarget = r[1]


if searchTarget != '' :
    rDomain = hou.ui.selectNode()

    print rDomain
    try :
        test = hou.node(rDomain).allSubChildren()
    except:
        print "problem"
        #sys.exit(0)
        
    for nd in hou.node(rDomain).allSubChildren() :
        for parm in nd.parms():
            paramsCounter += 1
            try:
                strParam = str(nd.evalParm(parm.path()))
                #print strParam
            except:
                #print "problem !!!!"
                strParam = ""
            if strParam.find(searchTarget)!= -1 :
                nuggetsFound.append(nd)
        inc+= 1
        
print ("%s nodes, %s paramters, %s nugget found" % (inc,paramsCounter,len(nuggetsFound)))
for nd in nuggetsFound :
    print (nd.path())

    

]]></script>
  </tool>

  <tool name="extract_planes" label="extract_planes" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[s = hou.selectedNodes()[0]
root = s.parent()

def findLights():
    lightPlanes = []
    print "Find Lights Function ----"
    for i in range(nPlanes):
        plane = s.planes()[i]
    
        ### if it's an "light" plane
        if plane.find("obj_") != -1:
            lightPlanes.append(plane)
            
    print len(lightPlanes), "Light Planes"
    
    nameArray = []
    
    for lightPlane in lightPlanes:
        lightName = lightPlane.split("_")[1]
        if not lightName in nameArray:
            nameArray.append(lightName)    

    return nameArray
            
            
            
myPlanes = ()
nPlanes = len(s.planes())
print nPlanes


lights = findLights()
colors = []
colors.append(hou.Color((255,0,0)))
colors.append(hou.Color((0,255,0)))
colors.append(hou.Color((0,0,255)))
colors.append(hou.Color((255,255,0)))

inc = 0
for light in lights:
    nodes = []
    for plane in s.planes():
        if plane.find(light) != -1 and plane.find("coat") == -1  and plane.find("reflect") == -1:
            extract = root.createNode("gui2one_COP_extract_channel")
            nodes.append(extract)
            extract.setInput(0,s)
            extract.setColor(colors[inc % 4])
            extract.parm("plane_name").set(plane)
            extract.setName(light +"__"+ plane.split("_")[2] + "__" +plane.split("_")[3])
            
    inc += 1
    
    
    for i in range(len(nodes)-1):
        addNode = root.createNode("add")
        
        if i == 0:
            addNode.setInput(0,nodes[i])
            addNode.setInput(1,nodes[i+1])
            oldAdd = addNode
        else:
            addNode.setInput(0, oldAdd    )
            addNode.setInput(1,nodes[i+1])
            oldAdd = addNode

inc = 0
for light in lights:
    nodes = []
    for plane in s.planes():
        if plane.find(light) != -1 :
            if plane.find("coat") != -1 or plane.find("reflect") != -1:
                extract = root.createNode("gui2one_COP_extract_channel")
                nodes.append(extract)
                extract.setInput(0,s)
                extract.setColor(colors[inc % 4])
                extract.parm("plane_name").set(plane)
                extract.setName(light +"__"+ plane.split("_")[2] + "__" +plane.split("_")[3])
            
    inc += 1
    
    
    for i in range(len(nodes)-1):
        addNode = root.createNode("add")
        
        if i == 0:
            addNode.setInput(0,nodes[i])
            addNode.setInput(1,nodes[i+1])
            oldAdd = addNode
        else:
            addNode.setInput(0, oldAdd    )
            addNode.setInput(1,nodes[i+1])
            oldAdd = addNode            
       ]]></script>
  </tool>

  <tool name="CHOP_clean" label="CHOP_clean" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[nodes = hou.selectedNodes()

inc = 0

for node in nodes :
    parm = node.parm("export")
    
    if parm.eval() != "":
        parm.set("")        
        inc += 1

print(str(inc) +" Chop node(s) Export prefix parm  cleaned")        
   
    ]]></script>
  </tool>

  <tool name="dof_null" label="dof_null" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[if hou.selectedNodes().__len__() > 0 : 
    c = hou.selectedNodes()[0]
    if c.type().name() == "cam" :
        root = c.parent()
        nullNode = root.createNode("null")
        nullNode.setName(c.name() + "_dof_null")
        nullNode.setPosition((c.position()[0], c.position()[1]-0.6))
        nullNode.parm("dcolorr").set(0.9)
        nullNode.parm("dcolorg").set(0.9)
        nullNode.parm("dcolorb").set(0.0)
        
        nullNode.parm("controltype").set(4)
        
        #################
        chopnet = root.createNode("chopnet")
        chopnet.setName(c.name()+"_chopnet")
        chopnet.setPosition((c.position()[0], c.position()[1]-1.1))
        nullObjNode = chopnet.createNode("object")
        nullObjNode.setName("dof_null_position")
        nullObjNode.parm("targetpath").set(nullNode.path())
        
        camObjNode = chopnet.createNode("object")
        camObjNode.setName("cam_position")
        camObjNode.parm("targetpath").set(c.path())        
        
        exp = 'distance('
        exp += 'chop("'+ camObjNode.path()+'/tx"),'
        exp += 'chop("'+ camObjNode.path()+'/ty"),'
        exp += 'chop("'+ camObjNode.path()+'/tz"),'        
        exp += 'chop("'+ nullObjNode.path()+'/tx"),'
        exp += 'chop("'+ nullObjNode.path()+'/ty"),'
        exp += 'chop("'+ nullObjNode.path()+'/tz"))'
        c.parm("focus").setExpression(exp)
        #print nullNode
    else :
        hou.ui.displayMessage("select a camera node")        
else :
    hou.ui.displayMessage("select a camera")
]]></script>
  </tool>

  <tool name="null_OUT" label="null_OUT" icon="PLASMA_App">
    <toolMenuContext name="viewer">
      <contextOpType>*</contextOpType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="cop_viewer">
      <contextNetType>COP2</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
      <contextNetType>CHOP</contextNetType>
      <contextNetType>SHOP</contextNetType>
      <contextNetType>COP2</contextNetType>
      <contextNetType>VOP</contextNetType>
      <contextNetType>VOPNET</contextNetType>
      <contextNetType>DOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>gui2one_scripts</toolSubmenu>
    <script scriptType="python"><![CDATA[import sys

if(hou.selectedNodes().__len__() > 0):

    sel = hou.selectedNodes()[0]

else:
    hou.ui.displayMessage("Select a node")
    # if selection is empty exit the tool
    sys.exit()
    

 

nullNode = sel.parent().createNode("null")
nullNode.setName("OUT", True)
nullNode.setColor(hou.Color((1.0,0.0,0.0)))



for conn in sel.outputConnections():
    index = conn.inputIndex()
    outputNode = conn.outputItem()
    outputNode.setInput(index,nullNode)

  
nullNode.insertInput(0,sel)    

nullNode.moveToGoodPosition()

]]></script>
  </tool>

  <tool name="sop_uvquickshade" label="UV Quick Shade" icon="SOP_uvquickshade">
    <helpURL>operator:Sop/uvquickshade</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/uvquickshade</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Material</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'uvquickshade', allow_obj_sel=False)]]></script>
  </tool>

  <tool name="sop_dissolve::2.0" label="Dissolve" icon="SOP_dissolve-2.0">
    <helpURL>operator:Sop/dissolve?version=2.0</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/dissolve::2.0</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Polygon</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'dissolve::2.0')]]></script>
  </tool>

  <tool name="sop_font" label="Font" icon="SOP_font">
    <helpURL>operator:Sop/font</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
      <contextNetType>LOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Primitive</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

kwargs['bbox'] = hou.BoundingBox(-1.8777500391, -0.370000004768, 0.0, 1.87775015831, 0.362000018358, 0.0)
soptoolutils.genericTool(kwargs, 'font')]]></script>
  </tool>

  <tool name="sop_ray" label="Ray" icon="SOP_ray">
    <helpURL>operator:Sop/ray</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/ray</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Manipulate</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'ray')]]></script>
  </tool>

  <tool name="sop_skin" label="Skin" icon="SOP_skin">
    <helpURL>operator:Sop/skin</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/skin</contextOpType>
    </toolMenuContext>
    <toolSubmenu>NURBS</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'skin')]]></script>
  </tool>

  <tool name="sop_sweep::2.0" label="Sweep" icon="SOP_sweep-2.0">
    <helpURL>operator:Sop/sweep?version=2.0</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/sweep::2.0</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Utility</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'sweep::2.0')]]></script>
  </tool>

  <tool name="sop_creep" label="Creep" icon="SOP_creep">
    <helpURL>operator:Sop/creep</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/creep</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Manipulate</toolSubmenu>
    <toolSubmenu>Utility</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'creep')]]></script>
  </tool>

  <tool name="sop_polyexpand2d" label="PolyExpand2D" icon="SOP_polyexpand2d">
    <helpURL>operator:Sop/polyexpand2d</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/polyexpand2d</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Polygon</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'polyexpand2d')]]></script>
  </tool>

  <tool name="sop_polyreduce::2.0" label="PolyReduce" icon="SOP_polyreduce-2.0">
    <helpURL>operator:Sop/polyreduce?version=2.0</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/polyreduce::2.0</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Polygon</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'polyreduce::2.0')]]></script>
  </tool>

  <tool name="sop_facet" label="Facet" icon="SOP_facet">
    <helpURL>operator:Sop/facet</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/facet</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Polygon</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'facet')]]></script>
  </tool>

  <tool name="sop_carve" label="Carve" icon="SOP_carve">
    <helpURL>operator:Sop/carve</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/carve</contextOpType>
    </toolMenuContext>
    <toolSubmenu>NURBS</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'carve')]]></script>
  </tool>

  <tool name="sop_rails" label="Rails" icon="SOP_rails">
    <helpURL>operator:Sop/rails</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/rails</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Utility</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'rails')]]></script>
  </tool>

  <tool name="sop_lsystem" label="L-System" icon="SOP_lsystem">
    <helpURL>operator:Sop/lsystem</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
      <contextNetType>LOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Primitive</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

if hou.ui.orientationUpAxis() == hou.orientUpAxis.Z:
    kwargs['bbox'] = hou.BoundingBox(-0.50597846508, -0.545715391636, 0.0, 0.39274096489, 0.392554789782, 0.979372382164)
else:
    kwargs['bbox'] = hou.BoundingBox(-0.50597846508, 0.0, -0.545715391636, 0.39274096489, 0.979372382164, 0.392554789782)
lsystem = soptoolutils.genericTool(kwargs, 'lsystem')

if hou.ui.orientationUpAxis() == hou.orientUpAxis.Z:
    parm = lsystem.parm('premise')
    if not lsystem.type().hasPermanentUserDefaults() and not parm.hasTemporaryDefaults():
        parm.set('^(90)' + parm.evalAsString())]]></script>
  </tool>

  <tool name="sop_scatter::2.0" label="Scatter" icon="SOP_scatter-2.0">
    <helpURL>operator:Sop/scatter?version=2.0</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/scatter::2.0</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Particle</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'scatter::2.0')]]></script>
  </tool>

  <tool name="sop_polyfill" label="PolyFill" icon="SOP_polyfill">
    <helpURL>operator:Sop/polyfill</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/polyfill</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Polygon</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'polyfill')]]></script>
  </tool>

  <tool name="sop_fractal" label="Fractal" icon="SOP_fractal">
    <helpURL>operator:Sop/fractal</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/fractal</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Manipulate</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils
from soptoolutils import OrientInfo

soptoolutils.genericTool(kwargs, 'fractal', orient=OrientInfo('dir'))]]></script>
  </tool>

  <tool name="sop_edgecusp" label="Edge Cusp" icon="SOP_edgecusp">
    <helpURL>operator:Sop/edgecusp</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/edgecusp</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Polygon</toolSubmenu>
    <toolSubmenu>Edge</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'edgecusp', allow_obj_sel=False)]]></script>
  </tool>

  <tool name="sop_edgedivide" label="Edge Divide" icon="SOP_edgedivide">
    <helpURL>operator:Sop/edgedivide</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/edgedivide</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Polygon</toolSubmenu>
    <toolSubmenu>Edge</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'edgedivide', allow_obj_sel=False)]]></script>
  </tool>

  <tool name="sop_convert" label="Convert" icon="SOP_convert">
    <helpURL>operator:Sop/convert</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/convert</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Utility</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'convert', allow_obj_sel=False)]]></script>
  </tool>

  <tool name="sop_visibility" label="Visibility" icon="SOP_visibility">
    <helpURL>operator:Sop/visibility</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/visibility</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Attribute</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'visibility')]]></script>
  </tool>

  <tool name="sop_edgeflip" label="Edge Flip" icon="SOP_edgeflip">
    <helpURL>operator:Sop/edgeflip</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/edgeflip</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Polygon</toolSubmenu>
    <toolSubmenu>Edge</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'edgeflip', allow_obj_sel=False)]]></script>
  </tool>

  <tool name="sop_refine" label="Refine" icon="SOP_refine">
    <helpURL>operator:Sop/refine</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/refine</contextOpType>
    </toolMenuContext>
    <toolSubmenu>NURBS</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'refine', allow_obj_sel=False)]]></script>
  </tool>

  <tool name="sop_reverse" label="Reverse" icon="SOP_reverse">
    <helpURL>operator:Sop/reverse</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/reverse</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Polygon</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'reverse', allow_obj_sel=False)]]></script>
  </tool>

  <tool name="sop_edgecollapse" label="Edge Collapse" icon="SOP_edgecollapse">
    <helpURL>operator:Sop/edgecollapse</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/edgecollapse</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Polygon</toolSubmenu>
    <toolSubmenu>Edge</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'edgecollapse', allow_obj_sel=False)]]></script>
  </tool>

  <tool name="sop_bulge" label="Bulge" icon="SOP_bulge">
    <helpURL>operator:Sop/bulge</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/bulge</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Manipulate</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'bulge')]]></script>
  </tool>

  <tool name="sop_subdivide" label="Subdivide" icon="SOP_subdivide">
    <helpURL>operator:Sop/subdivide</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/subdivide</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Polygon</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'subdivide')]]></script>
  </tool>

  <tool name="sop_uvflatten::2.0" label="UV Flatten" icon="SOP_uvflatten">
    <helpURL>operator:Sop/uvflatten?version=2.0</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/uvflatten::2.0</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Material</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.customStateTool(kwargs, 'uvflatten::2.0')]]></script>
  </tool>

  <tool name="sop_edgeloop" label="Edge Loop" icon="SHELF_edgeloop">
    <helpURL>operator:sop_state/edgeloop</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Polygon</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.customStateTool(kwargs, 'edgeloop')]]></script>
  </tool>

  <tool name="sop_polysplit::2.0" label="PolySplit" icon="SOP_polysplit">
    <helpURL>operator:Sop/polysplit?version=2.0</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/polysplit::2.0</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Polygon</toolSubmenu>
    <toolSubmenu>Edge</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.customStateTool(kwargs, 'polysplit::2.0')]]></script>
  </tool>

  <tool name="sop_lattice" label="Lattice" icon="SOP_lattice">
    <helpURL>operator:Sop/lattice</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/lattice</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Rigging</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.customStateTool(kwargs, 'lattice')]]></script>
  </tool>

  <tool name="sop_polyextrude::2.0" label="PolyExtrude" icon="SOP_polyextrude">
    <helpURL>operator:Sop/polyextrude?version=2.0</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/polyextrude::2.0</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Polygon</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.customStateTool(kwargs, 'polyextrude::2.0')]]></script>
  </tool>

  <tool name="sop_polybridge" label="PolyBridge" icon="SOP_polybridge">
    <helpURL>operator:Sop/polybridge</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/polybridge</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Polygon</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.customStateTool(kwargs, 'polybridge')]]></script>
  </tool>

  <tool name="sop_edit" label="Edit" icon="SOP_edit">
    <helpURL>operator:Sop/edit</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/edit</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Manipulate</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.customStateTool(kwargs, 'edit')]]></script>
  </tool>

  <tool name="sop_sculpt" label="Sculpt" icon="SOP_sculpt">
    <helpURL>operator:Sop/sculpt</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/sculpt</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Manipulate</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.customStateTool(kwargs, 'sculpt')]]></script>
  </tool>

  <tool name="sop_uvbrush" label="UV Brush" icon="SOP_uvbrush">
    <helpURL>operator:Sop/uvbrush</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/uvbrush</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Material</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.customStateTool(kwargs, 'uvbrush')]]></script>
  </tool>

  <tool name="sop_comb" label="Comb" icon="SOP_comb">
    <helpURL>operator:Sop/comb</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/comb</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Attribute</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.customStateTool(kwargs, 'comb')]]></script>
  </tool>

  <tool name="object_null" label="Null" icon="OBJ_null">
    <helpURL>operator:Object/null</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Object/null</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Utility</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils

kwargs['bbox'] = hou.BoundingBox(-0.5, -0.5, -0.5, 0.5, 0.5, 0.5)
objecttoolutils.genericTool(kwargs, 'null')]]></script>
  </tool>

  <tool name="object_morph" label="Morph" icon="SOP_blendshapes">
    <helpURL>operator:obj_state/morph</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Rigging</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils

objecttoolutils.customStateTool(kwargs, 'morph')]]></script>
  </tool>

  <tool name="object_mirrormusclecapture" label="Mirror Muscle Mask" icon="OBJ_STATE_mirrorcapture">
    <helpURL>operator:obj_state/mirrormusclecapture</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Rigging</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils

objecttoolutils.customStateTool(kwargs, 'mirrormusclecapture')]]></script>
  </tool>

  <tool name="object_path" label="Path" icon="OBJ_STATE_path">
    <helpURL>operator:Object/path</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Object/path</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Utility</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils

objecttoolutils.customStateTool(kwargs, 'path')]]></script>
  </tool>

  <tool name="object_capturegeometry" label="Capture Geometry" icon="SOP_capture">
    <helpURL>operator:obj_state/capturegeometry</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Rigging</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils

objecttoolutils.customStateTool(kwargs, 'capturegeometry')]]></script>
  </tool>

  <tool name="object_pose" label="Pose" icon="OBJ_STATE_pose">
    <helpURL>operator:obj_state/pose</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Rigging</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils

objecttoolutils.customStateTool(kwargs, 'pose')]]></script>
  </tool>

  <tool name="object_bonesfromcurve" label="Bones from Curve" icon="OBJ_STATE_bonesfromcurve">
    <helpURL>operator:obj_state/bonesfromcurve</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Rigging</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils

objecttoolutils.customStateTool(kwargs, 'bonesfromcurve')]]></script>
  </tool>

  <tool name="object_bones" label="Bones" icon="OBJ_STATE_bones">
    <helpURL>operator:obj_state/bones</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Rigging</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils

objecttoolutils.customStateTool(kwargs, 'bones')]]></script>
  </tool>

  <tool name="object_aligncapturepose" label="Align Capture Pose" icon="OBJ_STATE_aligncapturepose">
    <helpURL>operator:obj_state/aligncapturepose</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Rigging</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils

objecttoolutils.customStateTool(kwargs, 'aligncapturepose')]]></script>
  </tool>

  <tool name="object_blendpose" label="BlendPose" icon="OBJ_STATE_blendpose">
    <helpURL>operator:obj_state/blendpose</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Parenting</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils

objecttoolutils.customStateTool(kwargs, 'blendpose')]]></script>
  </tool>

  <tool name="object_parent" label="Parent" icon="SHELF_parent">
    <helpURL>operator:obj_state/parent</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Parenting</toolSubmenu>
    <toolSubmenu>Rigging</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils

objecttoolutils.customStateTool(kwargs, 'parent')]]></script>
  </tool>

  <tool name="object_setmuscleid" label="Set Muscle ID" icon="MISC_rename">
    <helpURL>tool:muscle_setmuscleid</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Rigging</toolSubmenu>
    <script scriptType="python"><![CDATA[import muscletoolutils

muscletoolutils.setMuscleID()]]></script>
  </tool>

  <tool name="object_musclepin" label="Muscle Pin" icon="OBJ_musclepin">
    <helpURL>tool:muscle_musclepin</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Rigging</toolSubmenu>
    <script scriptType="python"><![CDATA[import muscletoolutils

muscletoolutils.createMusclePin(kwargs)]]></script>
  </tool>

  <tool name="object_tissuesimulate" label="Tissue System" icon="SOP_tissuesolver">
    <helpURL>tool:muscle_tissuesimulate</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Rigging</toolSubmenu>
    <script scriptType="python"><![CDATA[import muscletoolutils

muscletoolutils.createTissueSim()]]></script>
  </tool>

  <tool name="object_detachmuscles" label="Detach From Bones" icon="SHELF_muscle_detach">
    <helpURL>tool:muscle_detachmuscles</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Rigging</toolSubmenu>
    <script scriptType="python"><![CDATA[import muscletoolutils

muscletoolutils.detachMuscleInputs(None)]]></script>
  </tool>

  <tool name="object_strokemuscle" label="Stroke Muscle" icon="OBJ_muscle">
    <helpURL>tool:muscle_strokemuscle</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Rigging</toolSubmenu>
    <script scriptType="python"><![CDATA[import muscletoolutils

muscletoolutils.createRiggedMuscleByStroke()
]]></script>
  </tool>

  <tool name="object_attachmuscles" label="Attach To Bones" icon="SHELF_muscle_attach">
    <helpURL>tool:muscle_attachmuscles</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Rigging</toolSubmenu>
    <script scriptType="python"><![CDATA[import muscletoolutils

muscletoolutils.attachMuscleInputs(None)]]></script>
  </tool>

  <tool name="object_paintmusclemask" label="Paint Muscle Mask" icon="SHELF_paint_muscle_mask">
    <helpURL>tool:muscle_paintmusclemask</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Rigging</toolSubmenu>
    <script scriptType="python"><![CDATA[import muscletoolutils

muscletoolutils.paintMuscleMask()]]></script>
  </tool>

  <tool name="object_muscledisplace" label="Muscle Displace" icon="SOP_inflate">
    <helpURL>tool:muscle_displace</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Rigging</toolSubmenu>
    <script scriptType="python"><![CDATA[import muscletoolutils

muscletoolutils.displaceSkinWithMuscle()]]></script>
  </tool>

  <tool name="object_frankenmuscle" label="Franken Muscle" icon="OBJ_frankenmuscle">
    <helpURL>tool:muscle_frankenmuscle</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Rigging</toolSubmenu>
    <script scriptType="python"><![CDATA[import muscletoolutils

muscletoolutils.createFrankenMuscle(kwargs)
]]></script>
  </tool>

  <tool name="object_musclerig" label="Muscle Rig" icon="OBJ_musclerig">
    <helpURL>tool:muscle_rig</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Rigging</toolSubmenu>
    <script scriptType="python"><![CDATA[import muscletoolutils

muscletoolutils.createMuscleRigByStroke()
]]></script>
  </tool>

  <tool name="object_riggedmuscle" label="Muscle" icon="SHELF_point_to_point_muscle">
    <helpURL>tool:muscle_riggedmuscle</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Rigging</toolSubmenu>
    <script scriptType="python"><![CDATA[import muscletoolutils

muscletoolutils.createRiggedMuscle(kwargs)
]]></script>
  </tool>

  <tool name="sop_groom_curveadvect" label="Curve Advect" icon="SOP_guideadvect">
    <helpURL>tool:sop_groom_curveadvect</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Hair</toolSubmenu>
    <script scriptType="python"><![CDATA[
import furtoolutils
furtoolutils.curveAdvectTool(kwargs)]]></script>
  </tool>

  <tool name="sop_groom_whitehair" label="Add White Hairs" icon="FUR_paint_white_density">
    <helpURL>tool:sop_groom_whitehair</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Hair</toolSubmenu>
    <script scriptType="python"><![CDATA[
import furtoolutils
furtoolutils.whiteHairTool(kwargs)]]></script>
  </tool>

  <tool name="sop_groom_hairclump" label="Clump Guides" icon="FUR_paint_clumping">
    <helpURL>tool:sop_groom_hairclump</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Hair</toolSubmenu>
    <script scriptType="python"><![CDATA[
import furtoolutils
furtoolutils.clumpHairTool(kwargs)]]></script>
  </tool>

  <tool name="sop_groom_guideprocess_frizz" label="Frizz Guides" icon="FUR_paint_frizz">
    <helpURL>tool:sop_groom_guideprocess_frizz</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Hair</toolSubmenu>
    <script scriptType="python"><![CDATA[
import furtoolutils
furtoolutils.guideProcessTool(kwargs, 'frizz')]]></script>
  </tool>

  <tool name="sop_groom_guideprocess_smooth" label="Smooth Guides" icon="FUR_smooth">
    <helpURL>tool:sop_groom_guideprocess_smooth</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Hair</toolSubmenu>
    <script scriptType="python"><![CDATA[
import furtoolutils
furtoolutils.guideProcessTool(kwargs, 'smooth')]]></script>
  </tool>

  <tool name="sop_groom_guideprocess_straighten" label="Straighten Guides" icon="FUR_paint_straighten">
    <helpURL>tool:sop_groom_guideprocess_straighten</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Hair</toolSubmenu>
    <script scriptType="python"><![CDATA[
import furtoolutils
furtoolutils.guideProcessTool(kwargs, 'straighten')]]></script>
  </tool>

  <tool name="sop_groom_guideprocess_bend" label="Bend Guides" icon="FUR_orientation">
    <helpURL>tool:sop_groom_guideprocess_bend</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Hair</toolSubmenu>
    <script scriptType="python"><![CDATA[
import furtoolutils
furtoolutils.guideProcessTool(kwargs, 'bend')]]></script>
  </tool>

  <tool name="sop_groom_guideprocess_lift" label="Lift Guides" icon="FUR_lift_hair">
    <helpURL>tool:sop_groom_guideprocess_lift</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Hair</toolSubmenu>
    <script scriptType="python"><![CDATA[
import furtoolutils
furtoolutils.guideProcessTool(kwargs, 'setlift')]]></script>
  </tool>

  <tool name="sop_groom_guideprocess_length" label="Set Guide Length" icon="FUR_paint_length">
    <helpURL>tool:sop_groom_guideprocess_length</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Hair</toolSubmenu>
    <script scriptType="python"><![CDATA[
import furtoolutils
furtoolutils.guideProcessTool(kwargs, 'setlength')]]></script>
  </tool>

  <tool name="sop_groom_guideprocess_setdir" label="Set Guide Direction" icon="FUR_comb">
    <helpURL>tool:sop_groom_guideprocess_setdir</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Hair</toolSubmenu>
    <script scriptType="python"><![CDATA[
import furtoolutils
furtoolutils.guideProcessTool(kwargs, 'setdirvec')]]></script>
  </tool>

  <tool name="sop_groom_guideinit" label="Initialize Guides" icon="FUR_initialize_guides">
    <helpURL>tool:sop_groom_guideinit</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Hair</toolSubmenu>
    <script scriptType="python"><![CDATA[
import furtoolutils
furtoolutils.guideInitTool(kwargs)]]></script>
  </tool>

  <tool name="sop_groom_drawpartingline" label="Part Guides" icon="FUR_addparting">
    <helpURL>tool:drawpartingline</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Grooming</toolSubmenu>
    <script scriptType="python"><![CDATA[
import furtoolutils
furtoolutils.drawPartingLineTool(kwargs)]]></script>
  </tool>

  <tool name="sop_groom_reguide" label="Reguide" icon="FUR_reguide">
    <helpURL>tool:reguide</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Grooming</toolSubmenu>
    <script scriptType="python"><![CDATA[
import furtoolutils
furtoolutils.reguideTool(kwargs)]]></script>
  </tool>

  <tool name="object_groom_haircardtexture" label="Hair Card Texture" icon="FUR_haircardtex">
    <helpURL>tool:groom_haircardtexture</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Hair</toolSubmenu>
    <script scriptType="python"><![CDATA[
import furtoolutils
furtoolutils.hairCardTextureTool(kwargs)]]></script>
  </tool>

  <tool name="object_groom_isolateparts" label="Isolate Groom Parts" icon="FUR_isolate_parts">
    <helpURL>tool:groom_isolateparts</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Hair</toolSubmenu>
    <script scriptType="python"><![CDATA[
import furtoolutils
furtoolutils.isolateGroomParts(kwargs)]]></script>
  </tool>

  <tool name="object_groom_togglehairdisplay" label="Toggle Display" icon="FUR_toggle_display">
    <helpURL>tool:groom_togglehairdisplay</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Hair</toolSubmenu>
    <script scriptType="python"><![CDATA[
import furtoolutils
furtoolutils.toggleHairDisplayTool(kwargs)]]></script>
  </tool>

  <tool name="object_groom_recachestrokes" label="Recache Strokes" icon="FUR_recache_strokes">
    <helpURL>tool:groom_recachestrokes</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Hair</toolSubmenu>
    <script scriptType="python"><![CDATA[
import furtoolutils
furtoolutils.recacheStrokesTool(kwargs)]]></script>
  </tool>

  <tool name="object_groom_haircardgen" label="Generate Hair Cards" icon="FUR_haircardgen">
    <helpURL>tool:groom_haircardgen</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Hair</toolSubmenu>
    <script scriptType="python"><![CDATA[
import furtoolutils
furtoolutils.hairCardGenTool(kwargs)]]></script>
  </tool>

  <tool name="object_groom_hairgen" label="Generate Hair" icon="FUR_hairgen">
    <helpURL>tool:groom_hairgen</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Hair</toolSubmenu>
    <script scriptType="python"><![CDATA[
import furtoolutils
furtoolutils.hairGenTool(kwargs)]]></script>
  </tool>

  <tool name="object_groom_simguides" label="Simulate Guides" icon="FUR_add_dynamics">
    <helpURL>tool:groom_simguides</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Hair</toolSubmenu>
    <script scriptType="python"><![CDATA[
import furtoolutils
furtoolutils.simGuidesTool(kwargs)]]></script>
  </tool>

  <tool name="object_groom_animateguides" label="Deform Guides" icon="FUR_animate">
    <helpURL>tool:groom_animateguides</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Hair</toolSubmenu>
    <script scriptType="python"><![CDATA[
import furtoolutils
furtoolutils.animateGuidesTool(kwargs)]]></script>
  </tool>

  <tool name="object_groom_groommerge" label="Merge Groom Objects" icon="FUR_groommerge">
    <helpURL>tool:groom_groommerge</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Hair</toolSubmenu>
    <script scriptType="python"><![CDATA[
import furtoolutils
furtoolutils.groomMergeTool(kwargs)]]></script>
  </tool>

  <tool name="object_groom_guidegroom" label="Create Guides" icon="FUR_guidegroom">
    <helpURL>tool:groom_guidegroom</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Hair</toolSubmenu>
    <script scriptType="python"><![CDATA[
import furtoolutils
furtoolutils.guideGroomTool(kwargs)]]></script>
  </tool>

  <tool name="object_groom_addfur" label="Add Fur" icon="FUR_add_fur">
    <helpURL>tool:groom_addfur</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Hair</toolSubmenu>
    <script scriptType="python"><![CDATA[
import furtoolutils
furtoolutils.addFurTool(kwargs)]]></script>
  </tool>

  <tool name="object_groomextendhair" label="Extend Hair" icon="FUR_length">
    <helpURL>tool:extendhair</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Grooming</toolSubmenu>
    <script scriptType="python"><![CDATA[
import furtoolutils
furtoolutils.startGrooming(kwargs, tool="extend")]]></script>
  </tool>

  <tool name="object_groomcuthair" label="Cut Hair" icon="FUR_cut_hair">
    <helpURL>tool:cuthair</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Grooming</toolSubmenu>
    <script scriptType="python"><![CDATA[
import furtoolutils
furtoolutils.startGrooming(kwargs, tool="cut")]]></script>
  </tool>

  <tool name="object_groomsmooth" label="Smooth Hair" icon="FUR_smooth">
    <helpURL>tool:smoothhair</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Grooming</toolSubmenu>
    <script scriptType="python"><![CDATA[
import furtoolutils
furtoolutils.startGrooming(kwargs, tool="smooth")]]></script>
  </tool>

  <tool name="object_groomadjustlength" label="Length Adjust" icon="FUR_adjust_length">
    <helpURL>tool:lengthadjust</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Grooming</toolSubmenu>
    <script scriptType="python"><![CDATA[
import furtoolutils
furtoolutils.startGrooming(kwargs, tool="adjustlength")]]></script>
  </tool>

  <tool name="object_groompartbrush" label="Part Hair" icon="FUR_part_hair">
    <helpURL>tool:parthair</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Grooming</toolSubmenu>
    <script scriptType="python"><![CDATA[
import furtoolutils
furtoolutils.startGrooming(kwargs, tool="part")]]></script>
  </tool>

  <tool name="object_groomclumpbrush" label="Clump Hair" icon="FUR_clump_hair">
    <helpURL>tool:clumphair</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Grooming</toolSubmenu>
    <script scriptType="python"><![CDATA[
import furtoolutils
furtoolutils.startGrooming(kwargs, tool="clump")]]></script>
  </tool>

  <tool name="object_groomliftbrush" label="Lift Hair" icon="FUR_lift_hair">
    <helpURL>tool:lifthair</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Grooming</toolSubmenu>
    <script scriptType="python"><![CDATA[
import furtoolutils
furtoolutils.startGrooming(kwargs, tool="lift")]]></script>
  </tool>

  <tool name="object_groomhairalongsurface" label="Surface Brush" icon="FUR_surface_brush">
    <helpURL>tool:surfacebrush</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Grooming</toolSubmenu>
    <script scriptType="python"><![CDATA[
import furtoolutils
furtoolutils.startGrooming(kwargs, tool="groomsurface")]]></script>
  </tool>

  <tool name="object_groomhairinscreen" label="Screen Brush" icon="FUR_screen_brush">
    <helpURL>tool:screenbrush</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Grooming</toolSubmenu>
    <script scriptType="python"><![CDATA[
import furtoolutils
furtoolutils.startGrooming(kwargs, tool="groomscreen")]]></script>
  </tool>

  <tool name="object_plantguides" label="Plant Guides" icon="FUR_plant_guides">
    <helpURL>tool:plantguides</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Grooming</toolSubmenu>
    <script scriptType="python"><![CDATA[
import furtoolutils
furtoolutils.createFurAndStartGrooming(kwargs, tool="plantguides")]]></script>
  </tool>

  <tool name="object_drawhairguides" label="Draw Hair" icon="SOP_drawhair">
    <helpURL>tool:drawhair</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Grooming</toolSubmenu>
    <script scriptType="python"><![CDATA[
import furtoolutils
furtoolutils.startDrawing(kwargs)]]></script>
  </tool>

  <tool name="sop_polybevel::3.0" label="PolyBevel" icon="SOP_polybevel">
    <helpURL>operator:Sop/polybevel?version=3.0</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/polybevel::3.0</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Polygon</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils
soptoolutils.addPolyBevelTool(kwargs)
]]></script>
  </tool>

  <tool name="object_posespacedeform" label="Pose-Space Deform" icon="SOP_posespacedeform">
    <helpURL>tool:posespacedeform</helpURL>
    <script scriptType="python"><![CDATA[
import toolutils
toolutils.createOrShowPythonPanel(kwargs, 'sesi_pose_space_deform', 'Pose-Space Deform', 4)]]></script>
  </tool>

  <tool name="rigging_ikfrombones" label="IK from Bones" icon="OBJ_autorig_blank">
    <helpURL>tool:rigging_ikfrombones</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Rigging</toolSubmenu>
    <script scriptType="python"><![CDATA[
from rigtoolutils import boneiktwisttool
boneiktwisttool.invokeTool(kwargs)
]]></script>
  </tool>

  <tool name="rigging_ikfromobjects" label="IK from Objects" icon="OBJ_autorig_blank">
    <helpURL>tool:rigging_ikfromobjects</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Rigging</toolSubmenu>
    <script scriptType="python"><![CDATA[
from rigtoolutils import iktwisttool
iktwisttool.invokeTool(kwargs)
]]></script>
  </tool>

  <tool name="object_bakeanimation" label="Bake Animation" icon="ROP_bake_animation">
    <helpURL>operator:Driver/bake_animation</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Constraints</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils
objecttoolutils.bakeanimationStateTool(kwargs)]]></script>
  </tool>

  <tool name="object_constraintbake" label="Bake Constraint" icon="SHELF_constraint_bake">
    <helpURL>tool:bakeconstraints</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Constraints</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils
objecttoolutils.constraintbakeStateTool(kwargs)]]></script>
  </tool>

  <tool name="object_constrainttoggle" label="Toggle Constraint" icon="SHELF_constraint_toggle">
    <helpURL>tool:constrainttoggle</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Constraints</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils
objecttoolutils.constrainttoggleStateTool(kwargs)]]></script>
  </tool>

  <tool name="object_constraintdelete" label="Delete Constraint" icon="SOP_delete">
    <helpURL>tool:constraintdelete</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Constraints</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils
objecttoolutils.constraintdeleteStateTool(kwargs)]]></script>
  </tool>

  <tool name="object_constrainttransform" label="Transform Constraint" icon="CHOP_constrainttransform">
    <helpURL>tool:transformconstraint</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>LOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Constraints</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils
import loptoolutils
import toolutils

cwd = toolutils.sceneViewer().pwd()
if cwd.childTypeCategory() == hou.lopNodeTypeCategory():
    loptoolutils.constraintparentStateTool(kwargs)
else:
    objecttoolutils.constrainttransformStateTool(kwargs)]]></script>
  </tool>

  <tool name="object_constraintgamepad" label="Gamepad" icon="CHOP_gamepad">
    <helpURL>tool:constraintgamepad</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Constraints</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils

objecttoolutils.constraintgamepadStateTool(kwargs)]]></script>
  </tool>

  <tool name="object_constraintpoints" label="Points" icon="OBJ_rivet">
    <helpURL>tool:constraintpoints</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>LOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Constraints</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils
import loptoolutils
import toolutils

cwd = toolutils.sceneViewer().pwd()
mod = loptoolutils if cwd.childTypeCategory() == hou.lopNodeTypeCategory() else objecttoolutils
mod.constraintpointsStateTool(kwargs)]]></script>
  </tool>

  <tool name="object_constraintsurface" label="Surface" icon="OBJ_sticky">
    <helpURL>tool:constraintsurface</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>LOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Constraints</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils
import loptoolutils
import toolutils

cwd = toolutils.sceneViewer().pwd()
mod = loptoolutils if cwd.childTypeCategory() == hou.lopNodeTypeCategory() else objecttoolutils
mod.constraintsurfaceStateTool(kwargs)]]></script>
  </tool>

  <tool name="object_constraintpath" label="Follow Path" icon="SHELF_followpath">
    <helpURL>tool:constraintpath</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>LOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Constraints</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils
import loptoolutils
import toolutils

cwd = toolutils.sceneViewer().pwd()
mod = loptoolutils if cwd.childTypeCategory() == hou.lopNodeTypeCategory() else objecttoolutils
mod.constraintpathStateTool(kwargs)]]></script>
  </tool>

  <tool name="object_constraintlookat" label="Look At" icon="SHELF_lookat">
    <helpURL>tool:constraintlookat</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>LOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Constraints</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils
import loptoolutils
import toolutils

cwd = toolutils.sceneViewer().pwd()
mod = loptoolutils if cwd.childTypeCategory() == hou.lopNodeTypeCategory() else objecttoolutils
mod.constraintlookatStateTool(kwargs)]]></script>
  </tool>

  <tool name="object_constraintblend" label="Blend" icon="OBJ_blend">
    <helpURL>tool:constraintblend</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Constraints</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils

objecttoolutils.constraintblendStateTool(kwargs)]]></script>
  </tool>

  <tool name="object_constraintparentblend" label="Parent Blend" icon="SHELF_parent">
    <helpURL>tool:constraintparentblend</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Constraints</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils

objecttoolutils.constraintparentblendStateTool(kwargs)]]></script>
  </tool>

  <tool name="object_editcaptureregion" label="Edit Capture Regions" icon="OBJ_STATE_editcaptureregion">
    <helpURL>tool:editcaptureregions</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Rigging</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils

objecttoolutils.customStateTool(kwargs, 'editcaptureregion')]]></script>
  </tool>

  <tool name="object_mirrorcapture" label="Mirror Capture Weights" icon="OBJ_STATE_mirrorcapture">
    <helpURL>tool:mirrorcaptureweights</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Rigging</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils

objecttoolutils.customStateTool(kwargs, 'mirrorcapture')]]></script>
  </tool>

  <tool name="object_editcaptureweight" label="Edit Capture Weights" icon="OBJ_STATE_editcaptureweight">
    <helpURL>tool:editcaptureweights</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Rigging</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils

objecttoolutils.customStateTool(kwargs, 'editcaptureweight')]]></script>
  </tool>

  <tool name="object_editcaptureblend" label="Edit Capture Blends" icon="OBJ_STATE_editcaptureblend">
    <helpURL>tool:editcaptureblends</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Rigging</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils

objecttoolutils.customStateTool(kwargs, 'editcaptureblend')]]></script>
  </tool>

  <tool name="geometry_convertvdb" label="Convert VDB" icon="SOP_convertvdb">
    <helpURL>operator:Sop/convertvdb</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Volume</toolSubmenu>
    <script scriptType="python"><![CDATA[

import volumetoolutils

kwargs['volumetype'] = "vdb"
kwargs['optype'] = "convert"

volumetoolutils.volumeSource(kwargs)
]]></script>
  </tool>

  <tool name="geometry_vdbfromparticles" label="SDF Particles" icon="SOP_vdbfromparticles">
    <helpURL>operator:Sop/vdbfromparticles</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Volume</toolSubmenu>
    <script scriptType="python"><![CDATA[
import volumetoolutils

kwargs['volumetype'] = "vdb"
kwargs['optype'] = "fromparticles"

volumetoolutils.volumeSource(kwargs)
]]></script>
  </tool>

  <tool name="geometry_vdbfrompolygons" label="SDF Polys" icon="SOP_vdbfrompolygons">
    <helpURL>operator:Sop/vdbfrompolygons</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Volume</toolSubmenu>
    <script scriptType="python"><![CDATA[
import volumetoolutils

kwargs['volumetype'] = "vdb"
kwargs['optype'] = "frompolygons"

volumetoolutils.volumeSource(kwargs)
]]></script>
  </tool>

  <tool name="geometry_volumerasterizecurve" label="Fog Curve" icon="SOP_volumerasterizecurve">
    <helpURL>operator:Sop/volumerasterizecurve</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Volume</toolSubmenu>
    <script scriptType="python"><![CDATA[
import stroketoolutils

kwargs['type'] = "curve"
stroketoolutils.volumerasterizeSource(kwargs)
]]></script>
  </tool>

  <tool name="geometry_volumerasterizeparticles" label="Fog Particles" icon="SOP_volumerasterizeparticles">
    <helpURL>operator:Sop/volumerasterizeparticles</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Volume</toolSubmenu>
    <script scriptType="python"><![CDATA[
import stroketoolutils

kwargs['type'] = "particles"
stroketoolutils.volumerasterizeSource(kwargs)
]]></script>
  </tool>

  <tool name="geometry_volumerasterizepoints" label="Fog Points" icon="SOP_volumerasterizepoints">
    <helpURL>operator:Sop/volumerasterizepoints</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Volume</toolSubmenu>
    <script scriptType="python"><![CDATA[
import stroketoolutils

kwargs['type'] = "points"
stroketoolutils.volumerasterizeSource(kwargs)
]]></script>
  </tool>

  <tool name="geometry_spraypaint" label="Spray Paint" icon="SOP_spraypaint">
    <helpURL>tool:spraypaint</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[
import stroketoolutils

kwargs['type'] = "spraypaint"
stroketoolutils.strokeSource(kwargs)
]]></script>
  </tool>

  <tool name="geometry_drawcurve" label="Draw Curve" icon="SOP_drawcurve">
    <helpURL>tool:drawcurve</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[
import stroketoolutils

kwargs['type'] = "curve"
stroketoolutils.strokeSource(kwargs)
]]></script>
  </tool>

  <tool name="geometry_paintsdfvolume" label="Volume Paint SDF" icon="SOP_paintsdfvolume">
    <helpURL>operator:Sop/paintsdfvolume</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Volume</toolSubmenu>
    <script scriptType="python"><![CDATA[
import stroketoolutils

kwargs['type'] = "sdf"
stroketoolutils.strokeSource(kwargs)
]]></script>
  </tool>

  <tool name="geometry_paintfogvolume" label="Volume Paint Fog" icon="SOP_paintfogvolume">
    <helpURL>operator:Sop/paintfogvolume</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Volume</toolSubmenu>
    <script scriptType="python"><![CDATA[
import stroketoolutils

kwargs['type'] = "fog"
stroketoolutils.strokeSource(kwargs)
]]></script>
  </tool>

  <tool name="geometry_paintcolorvolume" label="Volume Paint Color" icon="SOP_paintcolorvolume">
    <helpURL>operator:Sop/paintcolorvolume</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Volume</toolSubmenu>
    <script scriptType="python"><![CDATA[
import stroketoolutils

kwargs['type'] = "color"
stroketoolutils.strokeSource(kwargs)
]]></script>
  </tool>

  <tool name="object_lagobject" label="Lag" icon="CHOP_lag">
    <helpURL>tool:lagobject</helpURL>
    <script scriptType="python"><![CDATA[import toolutils
import choptoolutils

def addLag(input_chop, source_name):
    lag_chop = input_chop.parent().createNode("lag", source_name + "_lag1")
    lag_chop.setInput(0, input_chop)
    lag_chop.moveToGoodPosition()
    lag_chop.parm("scope").set("t[xyz]")
    return lag_chop

scene_viewer = toolutils.sceneViewer()

targets = list(scene_viewer.selectObjects(
    prompt = "Select object to lag and press Enter to complete.",
    allow_multisel = False))
if len(targets) == 0:
    raise hou.Error("Nothing was selected.")
target = targets[0]
target.setSelected(False)

sources = list(scene_viewer.selectObjects(
    prompt = "Now select object to follow, if any, and press Enter to complete.",
    allow_multisel = False))
source = None
if len(sources) > 0:
    source = sources[0]
    source.setSelected(False)

(obj_chop, lag_chop, output_chop) = choptoolutils.modifyObjectTool(
    'lag', source, target, addLag)

output_chop.setExportFlag(True)

choptoolutils.visualizeParmEffect(lag_chop, output_chop)]]></script>
  </tool>

  <tool name="object_jiggleobject" label="Jiggle" icon="CHOP_jiggle">
    <helpURL>tool:jiggleobject</helpURL>
    <script scriptType="python"><![CDATA[import toolutils
import choptoolutils

def addJiggle(input_chop, source_name):
    chop = input_chop.parent().createNode("jiggle", source_name + "_jiggle1")
    chop.setInput(0, input_chop)
    chop.moveToGoodPosition()
    return chop

scene_viewer = toolutils.sceneViewer()

targets = list(scene_viewer.selectObjects(
    prompt = "Select object to jiggle and press Enter to complete.",
    allow_multisel = False))
if len(targets) == 0:
    raise hou.Error("Nothing was selected.")
target = targets[0]
target.setSelected(False)

sources = list(scene_viewer.selectObjects(
    prompt = "Now select object to follow, if any, and press Enter to complete.",
    allow_multisel = False))
source = None
if len(sources) > 0:
    source = sources[0]
    source.setSelected(False)

(obj_chop, jiggle_chop, output_chop) = choptoolutils.modifyObjectTool(
    'jiggle', source, target, addJiggle)

output_chop.setExportFlag(True)

choptoolutils.visualizeParmEffect(jiggle_chop, output_chop)]]></script>
  </tool>

  <tool name="geometry_file" label="File" icon="SOP_file">
    <helpURL>operator:Sop/file</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Import</toolSubmenu>
    <toolSubmenu>Export</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.chooseAndOpenGeoFile(kwargs, True)]]></script>
  </tool>

  <tool name="sop_uvedit" label="UV Edit" icon="SOP_uvedit">
    <helpURL>operator:Sop/uvedit</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/uvedit</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Material</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils

sop = soptoolutils.addUVTool(kwargs, 'uvedit', 'uvattrib')
]]></script>
  </tool>

  <tool name="sop_uvtransform::2.0" label="UV Transform" icon="SOP_uvtransform">
    <helpURL>operator:Sop/uvtransform?version=2.0</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/uvtransform::2.0</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Material</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils

sop = soptoolutils.addUVTool(kwargs, 'uvtransform::2.0', 'uvattrib')
]]></script>
  </tool>

  <tool name="sop_uvunwrap" label="UV Unwrap" icon="SOP_uvunwrap">
    <helpURL>operator:Sop/uvunwrap</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/uvunwrap</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Material</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils

sop = soptoolutils.addUVTool(kwargs, 'uvunwrap', 'uvattrib')
]]></script>
  </tool>

  <tool name="sop_uvpelt::2.0" label="UV Pelt" icon="SOP_uvpelt">
    <helpURL>operator:Sop/uvpelt?version=2.0</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/uvpelt</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Material</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils

sop = soptoolutils.addUVTool(kwargs, 'uvpelt::2.0', 'uvattrib')
]]></script>
  </tool>

  <tool name="sop_texture" label="UV Texture" icon="SOP_texture">
    <helpURL>operator:Sop/texture</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/texture</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Material</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils

sop = soptoolutils.addUVTool(kwargs, 'texture', 'uvattrib')
]]></script>
  </tool>

  <tool name="sop_uvfuse" label="UV Fuse" icon="SOP_uvfuse">
    <helpURL>operator:Sop/uvfuse</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/uvfuse</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Material</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils

sop = soptoolutils.addUVTool(kwargs, 'uvfuse', 'uvattrib')
]]></script>
  </tool>

  <tool name="sop_uvproject" label="UV Project" icon="SOP_uvproject">
    <helpURL>operator:Sop/uvproject</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/uvproject</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Material</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils

sop = soptoolutils.addUVTool(kwargs, 'uvproject', 'uvattrib')
# compute the geometry bounding box and use it for the projection plane
sop.parm('initbbox').pressButton()
]]></script>
  </tool>

  <tool name="geometry_snap" label="Snap" icon="SOP_fuse">
    <helpURL>operator:Sop/fuse?version=2.0</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Polygon</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils
sop = soptoolutils.genericTool(kwargs, 'fuse::2.0', 'snap1')
sop.parm('consolidatesnappedpoints').set(False)
]]></script>
  </tool>

  <tool name="sop_fuse::2.0" label="Fuse" icon="SOP_fuse">
    <helpURL>operator:Sop/fuse?version=2.0</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Polygon</toolSubmenu>
    <script scriptType="python"><![CDATA[
import soptoolutils
sop = soptoolutils.genericTool(kwargs, 'fuse::2.0')
sop.parm('consolidatesnappedpoints').set(True)
]]></script>
  </tool>

  <tool name="generic_cleartexcache" label="Clear Texture Cache" icon="SHELF_clear_texture_cache">
    <helpURL>tool:cleartexcache</helpURL>
    <script scriptType="hscript"><![CDATA[texcache -c]]></script>
  </tool>

  <tool name="generic_hide" label="Hide" icon="SHELF_hide">
    <helpURL>tool:hide</helpURL>
    <script scriptType="python"><![CDATA[import toolutils

active_pane = toolutils.activePane(kwargs)
prompt = toolutils.selectionPrompt(hou.objNodeTypeCategory())
selected_objects = list(active_pane.selectObjects(prompt))
for object in selected_objects:
    object.setDisplayFlag( False )
toolutils.genericStateTool(kwargs, 'objview')]]></script>
  </tool>

  <tool name="generic_delete" label="Delete" icon="SOP_delete">
    <helpURL>tool:delete</helpURL>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils
import doptoolutils


# find out curr context
active_pane = toolutils.activePane(kwargs)
if active_pane is not None and \
    active_pane.type() == hou.paneTabType.ContextViewer:
    active_pane = active_pane.sceneViewer()

if active_pane is None or active_pane.type() != hou.paneTabType.SceneViewer:
    raise hou.Error("The tool was not invoked in the scene viewer.")

# we determine what selection type we should consider (ie, OBJ, SOP,
#  DOP) based on the viewer network path and the child type
scene_viewer = active_pane
child_type   = scene_viewer.pwd().childTypeCategory()

if child_type == hou.objNodeTypeCategory():
    # object context: delete the object nodes
    prompt = toolutils.selectionPrompt(hou.objNodeTypeCategory())
    selected_objects = list(scene_viewer.selectObjects(prompt))
    for object in selected_objects:
        object.destroy()
    scene_viewer.setCurrentState('select')

elif child_type == hou.sopNodeTypeCategory():
    # geometry context: delete the component (points, edges, primitives)
    prompt = toolutils.selectionPrompt(hou.sopNodeTypeCategory())
    # we cannot consume the selection here as the tool we launch will
    # need to use it, i.e., we act as a preliminary select state here.
    selection = scene_viewer.selectGeometry(prompt=prompt,
                                            consume_selections=False)
    type = selection.geometryType()
    if type == hou.geometryType.Primitives \
             or type == hou.geometryType.Points \
             or not selection.primitiveTypes():
        node = soptoolutils.genericTool(kwargs, 'blast')
        node.parm('removegrp').set(True)
    else:
        soptoolutils.genericTool(kwargs, 'dissolve::2.0')
elif child_type == hou.dopNodeTypeCategory():
    # dynamics context: remove object or modifier from simulation
    # obtain the selection and separate objects from modifiers
    prompt = toolutils.selectionPrompt(hou.dopNodeTypeCategory())
    selected_dops = list(scene_viewer.selectDynamics(prompt, 0, True, True))
    dop_objects = []
    dop_modifiers = []
    for dop in selected_dops:
        if isinstance(dop, hou.DopObject):
            dop_objects.append( dop )
        elif isinstance(dop, hou.DopData):
            dop_modifiers.append( dop )
    # call functions that remove the dop data and modifiers from simulation
    if len(dop_objects) > 0:
        doptoolutils.dopObjectsRemoveFromSimulation(dop_objects)
    if len(dop_modifiers) > 0:
        doptoolutils.dopModifiersRemoveFromSimulation(dop_modifiers)

]]></script>
  </tool>

  <tool name="object_paintcapturelayer" label="Paint Capture Layer" icon="OBJ_STATE_paintcapturelayer">
    <helpURL>operator:Sop/capturelayerpaint</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Rigging</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericCaptureTool(kwargs, 'capturelayerpaint')]]></script>
  </tool>

  <tool name="object_autorigs" label="Autorigs" icon="OBJ_autorig">
    <helpURL>tool:autorigs</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Object/autorigs</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Rigging</toolSubmenu>
    <script scriptType="python"><![CDATA[
from autorigs.utils import autoRigsutils as autorigsutils

autorigsutils.createInterface(kwargs)

]]></script>
  </tool>

  <tool name="sop_deltamush" label="Delta Mush" icon="SOP_deltamush">
    <helpURL>operator:Sop/deltamush</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/deltamush</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Rigging</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils

deltamush = soptoolutils.genericTool(kwargs, 'deltamush')
if isinstance(toolutils.activePane(kwargs), hou.SceneViewer):
    deform = soptoolutils.findDeformTypeInputSop(deltamush)
    if deform is not None and len(deform.inputs()) > 0:
        deltamush.setInput(1, deform.inputs()[0])
]]></script>
  </tool>

  <tool name="sop_polydraw" label="PolyDraw" icon="SOP_polydraw">
    <helpURL>operator:Sop/topobuild</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Polygon</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils

sop = None
activepane = toolutils.activePane(kwargs)
if isinstance(activepane, hou.SceneViewer):
    parent = activepane.pwd()
    child_type = parent.childTypeCategory()
    if child_type == hou.objNodeTypeCategory():
        # create new object
        obj = parent.createNode('geo', 'polydraw_object1')
        obj.moveToGoodPosition()
        sop = obj.createNode('topobuild', 'polydraw1')
        sop.setCurrent(True, True)
    else:
        node = activepane.currentNode()
        if node and node.type().category() == hou.sopNodeTypeCategory() and node.type().name() == 'topobuild':
            sop = node
if sop:
    activepane.enterCurrentNodeState()
else:
    soptoolutils.genericTool(kwargs, 'topobuild', 'polydraw1')]]></script>
  </tool>

  <tool name="sop_topobuild" label="TopoBuild" icon="SOP_topobuild">
    <helpURL>operator:Sop/topobuild</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Polygon</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils

activepane = toolutils.activePane(kwargs)
if activepane.type() == hou.paneTabType.SceneViewer:
    sopnode, template = None, None
    node = activepane.currentNode()
    if node and node.type().category() == hou.sopNodeTypeCategory():
        # continue work in the current SOP network
        sopnode = node
        topobuild = toolutils.findInputNodeOfType(sopnode, 'topobuild', True)
        if topobuild:
            inputs = topobuild.inputs()
            if len(inputs) > 1:
                # re-use the template geometry
                template = inputs[1]

    templateobj = None
    if template is None:
        # select template geometry
        for obj in activepane.selectObjects(
                    prompt = 'Select projection geometry to retopologize and press Enter to continue.',
                    allowed_types = ('geo', ),
                    allow_multisel = False):
            templateobj = obj
            activepane.currentNode().setCurrent(False, True)

    extendobj = None
    # Only prompt the user if they alraedy selected a valid node.
    if templateobj and sopnode is None:
        # select topology to extend
        for obj in activepane.selectObjects(
                prompt = 'Now select topology to extend, if any, and press Enter to complete.',
                allowed_types = ('geo', ),
                allow_multisel = False):
            extendobj = obj
            sopnode = extendobj.displayNode()

    if templateobj and template is None:
        if templateobj != extendobj:
            # create a new container if the selected object is an ancestor of sopnode
            node = sopnode
            while node:
                if node == templateobj:
                    sopnode = None
                    break
                node = node.parent()
        else:
            sopnode = None
        if sopnode:
            container = sopnode.parent()
        else:
            # create container for retopo work
            container = templateobj.parent().createNode('geo', templateobj.name() + '_retopo')
            toolutils.removeDefaultGeometryObjectContents(container)
            container.moveToGoodPosition()

        # object merge template geometry
        template = container.createNode('object_merge')
        template.parm('objpath1').set(template.relativePathTo(templateobj))
        template.parm('xformpath').set('.')
        template.moveToGoodPosition()

    if template:
        template.setTemplateFlag(True)
        if sopnode is None or not (sopnode.type().name() == 'topobuild' and len(sopnode.inputs()) > 1):
            # create new topobuild node
            topobuild = template.parent().createNode('topobuild')
            topobuild.setInput(0, sopnode)
            topobuild.setInput(1, template)
            topobuild.moveToGoodPosition()
            topobuild.setDisplayFlag(True)
            topobuild.setRenderFlag(sopnode is None or sopnode.isRenderFlagSet())

            # add visualizer
            vis = hou.viewportVisualizers.createVisualizer(hou.viewportVisualizers.type('vis_color'), hou.viewportVisualizerCategory.Node, topobuild)
            vis.setParm('colortype', 'constant')
            vis.setParm('class', 'detail')
            vis.setParm('constcolorr', 0.0)
            vis.setParm('constcolorg', 0.9)
            vis.setParm('constcolorb', 0.21)
            vis.setIsActive(True)
            sopnode = topobuild
        sopnode.setCurrent(True, True)
        activepane.enterCurrentNodeState()
elif activepane.type() == hou.paneTabType.NetworkEditor:
    soptoolutils.genericTool(kwargs, 'topobuild')
else:
    raise hou.Error("Can't run the tool in the selected pane.")]]></script>
  </tool>

  <tool name="sop_uvsmooth" label="UV Smooth" icon="SOP_smooth">
    <helpURL>operator:Sop/smooth</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Material</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils
selection_queries = [
  {
    'parm_name' : 'group',
    'is_required' : True,
    'prompt' : 'Select the UV primitives to smooth and press Enter to continue.',
    'geometry_types' : (hou.geometryType.Primitives, )
  },
  {
    'parm_name' : 'constrainedpoints',
    'is_required' : False,
    'prompt' : 'Now select the points to constrain, if any, and press Enter to complete.',
    'geometry_types' : (hou.geometryType.Points, ),
    'use_existing_selection' : False,
    'allow_obj_sel' : False
  },
]
sopnodes = soptoolutils.createCustomSelectionSopNodeFilterTool(kwargs, 'smooth::2.0',
  'uvsmooth1', selection_queries)
for node in sopnodes:
  node.parm('attributes').set(soptoolutils.findViewersUV(kwargs))]]></script>
  </tool>

  <tool name="sop_smooth::2.0" label="Smooth" icon="SOP_smooth">
    <helpURL>operator:Sop/smooth</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Manipulate</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils
selection_queries = [
  {
    'parm_name' : 'group',
    'is_required' : True,
    'prompt' : 'Select the primitives to smooth and press Enter to continue.',
    'geometry_types' : (hou.geometryType.Primitives, )
  },
  {
    'parm_name' : 'constrainedpoints',
    'is_required' : False,
    'prompt' : 'Now select the points to constrain, if any, and press Enter to complete.',
    'geometry_types' : (hou.geometryType.Points, hou.geometryType.Edges),
    'use_existing_selection' : False,
    'allow_obj_sel' : False
  },
]
soptoolutils.createCustomSelectionSopNodeFilterTool(kwargs, 'smooth::2.0',
  'smooth1', selection_queries)]]></script>
  </tool>

  <tool name="sop_curve" label="Curve" icon="SOP_curve">
    <helpURL>operator:Sop/curve</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Primitive</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils

activepane = toolutils.activePane(kwargs)
if activepane.type() == hou.paneTabType.SceneViewer:
    # Get the current context.
    sceneviewer = toolutils.sceneViewer()
    # Create a SOP container.
    container = soptoolutils.createSopNodeContainer(sceneviewer, "curve_object1")
    # Create the curve.
    newnode = soptoolutils.createSopNodeGenerator(container, "curve", None)
    # Turn on the highlight flag so we see the SOPs selected output.
    newnode.setHighlightFlag(True)
    if sceneviewer.isCreateInContext() or \
      (container.parent().parent() and container.parent().parent().type() == hou.nodeType(hou.lopNodeTypeCategory(), "sopcreate")):
        newnode.setCurrent(True, True)
        sceneviewer.enterCurrentNodeState()
        toolutils.homeToSelectionNetworkEditorsFor(newnode)
    else:
        container.setCurrent(True, True)
        toolutils.homeToSelectionNetworkEditorsFor(container)
        activepane.setPwd(container.parent())
        activepane.setCurrentState("objcurve")
elif activepane.type() == hou.paneTabType.NetworkEditor:
    soptoolutils.genericTool(kwargs, "curve")
else:
    raise hou.Error("Can't run the tool in the selected pane.")]]></script>
  </tool>

  <tool name="object_combine" label="Combine" icon="SHELF_combine_objects">
    <helpURL>tool:combine</helpURL>
    <script scriptType="python"><![CDATA[import toolutils

scene_viewer = toolutils.sceneViewer()

# Ask for the objects to combine
selected_objects = list(scene_viewer.selectObjects(
    prompt = toolutils.selectionPrompt(hou.objNodeTypeCategory()),
    allow_multisel = True,
    allowed_types = ("geo",)))
# The following will raise an exception if nothing was selected.
if len(selected_objects) == 0:
    raise hou.Error("Nothing was selected.")

# Combine into the last picked item
current_objects = [obj for obj in selected_objects if obj.isCurrent()]
if len(current_objects) == 0:
    container = selected_objects[-1]
else:
    container = current_objects[-1]

selected_objects.remove(container)
container.combine(selected_objects)
toolutils.homeToSelectionNetworkEditorsFor(container)
]]></script>
  </tool>

  <tool name="geo_group" label="Group" icon="SOP_group">
    <helpURL>operator:Sop/groupcreate</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Group</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils
soptoolutils.genericTool(kwargs, 'groupcreate')]]></script>
  </tool>

  <tool name="geometry_extract" label="Extract" icon="SHELF_extract_object">
    <helpURL>tool:extract</helpURL>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils

activepane = toolutils.activePane(kwargs)
if activepane.type() != hou.paneTabType.SceneViewer:
    raise hou.Error("This tool cannot run in the current pane")

scene_viewer = toolutils.sceneViewer()
nodetypename = "delete"

# Obtain a geometry selection
geo_types = (hou.geometryType.Primitives, )
selection = scene_viewer.selectGeometry(
                "Select the primitives to extract and press Enter to complete",
                geometry_types = geo_types,
                allow_obj_sel = True)
# The following will raise an exception if nothing was selected.
if len(selection.nodes()) == 0:
    raise hou.Error("Nothing was selected.")

# Create a new SOP container with the merged geometry
container = soptoolutils.createSopNodeContainer(scene_viewer, "extract_object1")
merge_sop = selection.mergedNode(container, nodetypename, True, True)
# Turn back on the display flag for merged nodes
for sop in selection.nodes():
    sop.parent().setDisplayFlag(True)

# Change our viewer to the new object
scene_viewer.setPwd(merge_sop.parent())
merge_sop.setDisplayFlag(True)
merge_sop.setRenderFlag(True)
merge_sop.setHighlightFlag(True)
merge_sop.setCurrent(True, True)
merge_sop.moveToGoodPosition()
toolutils.homeToSelectionNetworkEditorsFor(merge_sop)
scene_viewer.enterCurrentNodeState()]]></script>
  </tool>

  <tool name="object_centerpivot" label="Move Pivot to Center" icon="SHELF_center_pivot">
    <helpURL>tool:centerpivot</helpURL>
    <script scriptType="python"><![CDATA[import toolutils

scene_viewer = None
activepane = toolutils.activePane(kwargs)
parent = activepane.pwd()
if activepane.type() != hou.paneTabType.SceneViewer:
    # Use the last selected object
    if parent.childTypeCategory() != hou.objNodeTypeCategory():
        raise hou.Error("This tool cannot be executed in this context")
    selected = [child for child in parent.children() if child.isSelected()]
else:
    scene_viewer = toolutils.sceneViewer()
    selected = scene_viewer.selectObjects(
                prompt = toolutils.selectionPrompt(hou.objNodeTypeCategory()),
                allow_multisel = True,
                allowed_types = ("geo",))

if len(selected) == 0:
    raise hou.Error("Nothing was selected")

for center_obj in selected:
    display = center_obj.displayNode()
    if display is None:
        pivot = hou.Vector3(0, 0, 0)        # Use 0,0,0 by convention
    else:
        geo = display.geometry()
        pivot = geo.boundingBox().center()
    center_obj.parmTuple("p").set(pivot)

if scene_viewer is not None:
    scene_viewer.setCurrentState("pose")]]></script>
  </tool>

  <tool name="object_movetopivot" label="Move Center to Pivot" icon="SHELF_move_center_to_pivot">
    <helpURL>tool:movetopivot</helpURL>
    <script scriptType="python"><![CDATA[import toolutils

scene_viewer = None
activepane = toolutils.activePane(kwargs)
parent = activepane.pwd()
if activepane.type() != hou.paneTabType.SceneViewer:
    # Use the last selected object
    if parent.childTypeCategory() != hou.objNodeTypeCategory():
        raise hou.Error("This tool cannot be executed in this context")
    selected = [child for child in parent.children() if child.isSelected()]
else:
    scene_viewer = toolutils.sceneViewer()
    selected = scene_viewer.selectObjects(
                prompt = toolutils.selectionPrompt(hou.objNodeTypeCategory()),
                allow_multisel = True,
                allowed_types = ("geo",))

if len(selected) == 0:
    raise hou.Error("Nothing was selected")

for center_obj in selected:
    display = center_obj.displayNode()
    if display:
        geo = display.geometry()
        pivot = geo.boundingBox().center()
        sop = center_obj.createNode('xform', 'move_to_pivot1')
        sop.setInput(0, display)
        sop.moveToGoodPosition()
        sop.setDisplayFlag(True)
        if display.isRenderFlagSet():
            sop.setRenderFlag(True)
        sop.parmTuple("t").set(-pivot)
        sop.parmTuple("p").set( pivot)

if scene_viewer is not None:
    scene_viewer.setCurrentState("pose")]]></script>
  </tool>

  <tool name="sop_clip" label="Clip" icon="SOP_clip">
    <helpURL>operator:Sop/clip</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Polygon</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils
import toolutils
from soptoolutils import OrientInfo

clip_sop = soptoolutils.genericTool(kwargs, 'clip', orient = OrientInfo('dir'))
activepane = toolutils.activePane(kwargs)
if isinstance(activepane, hou.SceneViewer) and \
        clip_sop is not None and len(clip_sop.inputs()) > 0:
    input = clip_sop.inputs()[0]
    input_center = input.geometry().boundingBox().center()
    clip_sop.parmTuple('origin').set(input_center)]]></script>
  </tool>

  <tool name="sop_knife" label="Knife" icon="SHELF_knife">
    <helpURL>operator:Sop/knife</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/knife</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Polygon</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils
import toolutils
from soptoolutils import OrientInfo

knife_sop = soptoolutils.genericTool(kwargs, 'knife', 'knife1', custom = False,
                                     orient = OrientInfo('dir'))
knife_sop.parm("knifeop").set("both")
knife_sop.setCreatorState('knife')
activepane = toolutils.activePane(kwargs)
if isinstance(activepane, hou.SceneViewer):
    sceneviewer = toolutils.sceneViewer()
    sceneviewer.setCurrentState("knife")
]]></script>
  </tool>

  <tool name="sop_metaball" label="Metaball" icon="SOP_metaball">
    <helpURL>operator:Sop/metaball</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/metaball</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Primitive</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

kwargs['bbox'] = hou.BoundingBox(-0.5, -0.5, -0.5, 0.5, 0.5, 0.5)
soptoolutils.genericTool(kwargs, 'metaball', merge_context=True)]]></script>
  </tool>

  <tool name="geometry_rbdsimpleguided" label="Simple Guided RBDs" icon="SHELF_rbd_guided">
    <helpURL>tool:rbdsimpleguided</helpURL>
    <script scriptType="python"><![CDATA[
import doprbdtoolutils

node = doprbdtoolutils.createSopRBD(kwargs, 'guided sim')
]]></script>
  </tool>

  <tool name="geometry_rbdsimplefracture" label="Simple Fracture" icon="SOP_rbdmaterialfracture">
    <helpURL>tool:rbdsimplefracture</helpURL>
    <script scriptType="python"><![CDATA[
import doprbdtoolutils

node = doprbdtoolutils.createSopRBD(kwargs, 'fracture')
]]></script>
  </tool>

  <tool name="geometry_vellumsimplesoftbody" label="Simple Softbody" icon="SHELF_vellum_softbody">
    <helpURL>tool:vellumsimplesoftbody</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import doppoptoolutils

node = doppoptoolutils.createSopVellum(kwargs, 'softbody')
]]></script>
  </tool>

  <tool name="geometry_vellumsimplecloth" label="Simple Cloth" icon="SHELF_vellum_simplecloth">
    <helpURL>tool:vellumsimplecloth</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import doppoptoolutils

node = doppoptoolutils.createSopVellum(kwargs, 'cloth')
]]></script>
  </tool>

  <tool name="geometry_pyrosimplebillowysmoke" label="Simple Billowy Smoke" icon="SHELF_smoke_heavy">
    <helpURL>tool:pyrosimplebillowysmoke</helpURL>
    <script scriptType="python"><![CDATA[
import dopsparsepyrotools

node = dopsparsepyrotools.createSopBillowySmoke(kwargs)
]]></script>
  </tool>

  <tool name="geometry_pyrosimplefireball" label="Simple Fireball" icon="SHELF_fireball">
    <helpURL>tool:pyrosimplefireball</helpURL>
    <script scriptType="python"><![CDATA[
import dopsparsepyrotools
node = dopsparsepyrotools.createSimpleFireball(kwargs, False)
]]></script>
  </tool>

  <tool name="geometry_pyrosimplefirespread" label="Simple Spreading Fire" icon="SHELF_spyro_firespread">
    <helpURL>tool:pyrosimplefirespread</helpURL>
    <script scriptType="python"><![CDATA[
import dopsparsepyrotools

node = dopsparsepyrotools.createSopSpreadingFire(kwargs)
]]></script>
  </tool>

  <tool name="geometry_spyro_campfire" label="Simple Bonfire" icon="SHELF_fire">
    <helpURL>tool:spyro_simplecampfire</helpURL>
    <script scriptType="python"><![CDATA[
import dopsparsepyrotools
dopsparsepyrotools.createBonfire(kwargs, False)
]]></script>
  </tool>

  <tool name="geometry_spyro_gpuburst" label="Simple GPU Explosion" icon="SHELF_spyro_gpuburst">
    <helpURL>tool:spyro_simplegpuexplosion</helpURL>
    <script scriptType="python"><![CDATA[
import dopsparsepyrotools
node = dopsparsepyrotools.sopGPUBurst(kwargs)
]]></script>
  </tool>

  <tool name="geometry_spyro_airexplosion" label="Simple Aerial Explosion" icon="SHELF_spyro_airexplosion">
    <helpURL>tool:spyro_simpleairexplosion</helpURL>
    <script scriptType="python"><![CDATA[
import dopsparsepyrotools
dopsparsepyrotools.createAerialExplosion(kwargs, False)
]]></script>
  </tool>

  <tool name="geometry_spyro_groundexplosion" label="Simple Ground Explosion" icon="SHELF_spyro_groundexplosion">
    <helpURL>tool:spyro_simplegroundexplosion</helpURL>
    <script scriptType="python"><![CDATA[
import dopsparsepyrotools
dopsparsepyrotools.createGroundExplosion(kwargs, False)
]]></script>
  </tool>

  <tool name="geometry_loft" label="Loft" icon="SOP_loft">
    <helpURL>tool:loft</helpURL>
    <script scriptType="python"><![CDATA[import soptoolutils

u_selector_only = [0]
node = soptoolutils.genericSopNodeFilterTool(kwargs, 'skin', 'loft1', False, False, True, u_selector_only)]]></script>
  </tool>

  <tool name="geometry_twist" label="Twist" icon="SHELF_twist_twist">
    <helpURL>tool:twist</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/bend</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Manipulate</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils
node = soptoolutils.createBendSop(kwargs, "twist1")
node.parm("enabletwist").set(1)
node.parm("enablebend").set(0)
]]></script>
  </tool>

  <tool name="sop_bend" label="Bend" icon="SHELF_twist_bend">
    <helpURL>tool:bend</helpURL>
    <toolMenuContext name="viewer">
      <contextOpType>Sop/bend</contextOpType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/bend</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Manipulate</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils
soptoolutils.createBendSop(kwargs, "bend1")
]]></script>
  </tool>

  <tool name="geometry_lineartaper" label="Linear Taper" icon="SHELF_twist_linear_taper">
    <helpURL>tool:lineartaper</helpURL>
    <toolMenuContext name="viewer">
      <contextOpType>Sop/bend</contextOpType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/bend</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Manipulate</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils
node = soptoolutils.createBendSop(kwargs, "lineartaper1")
node.parm("enabletaper").set(1)
node.parm("enablebend").set(0)
]]></script>
  </tool>

  <tool name="geometry_squashstretch" label="Squash and Stretch" icon="SHELF_twist_squashstretch">
    <helpURL>tool:squashstretch</helpURL>
    <script scriptType="python"><![CDATA[import soptoolutils
node = soptoolutils.createBendSop(kwargs, "squashstretch1")
node.parm("enablelengthscale").set(1)
node.parm("enablebend").set(0)
]]></script>
  </tool>

  <tool name="geometry_voronoifracture" label="Shatter" icon="SOP_shatter">
    <helpURL>tool:shatter</helpURL>
    <script scriptType="python"><![CDATA[
import soptoolutils

# Create our voronoi fracture

fracture = soptoolutils.genericTool(kwargs, 'voronoifracture::2.0')

fognode = fracture.parent().createNode('isooffset', 'converttofog1')
fognode.parm("output").set('fogvolume')
fognode.parm("samplediv").set(30)

fognode.setNextInput(fracture.inputs()[0])

fognode.moveToGoodPosition()

scatternode = fracture.parent().createNode('scatter', 'chunkcenters')
scatternode.parm("forcetotal").set(True)
scatternode.parm("npts").set(10)
scatternode.parm("relaxpoints").set(False)
scatternode.setNextInput(fognode)
scatternode.moveToGoodPosition()

fracture.setNextInput(scatternode)
fracture.moveToGoodPosition()

]]></script>
  </tool>

  <tool name="geometry_fogvolume" label="Volume" icon="SOP_volume">
    <helpURL>operator:Sop/isooffset</helpURL>
    <script scriptType="python"><![CDATA[
import soptoolutils

node = soptoolutils.genericTool(kwargs, 'isooffset', 'converttofog1')
node.parm("output").set('fogvolume')
node.parm("samplediv").set(30)
]]></script>
  </tool>

  <tool name="sop_boolean::2.0" label="Boolean" icon="SOP_boolean">
    <helpURL>operator:Sop/boolean</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Polygon</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils
soptoolutils.addBooleanTool(kwargs)
]]></script>
  </tool>

  <tool name="geometry_mirror" label="Mirror" icon="SOP_mirror">
    <helpURL>tool:mirror</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Manipulate</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils

scene_viewer = toolutils.sceneViewer();
current_path = scene_viewer.pwd();
if current_path.childTypeCategory() == hou.objNodeTypeCategory():
    toolutils.genericStateTool(kwargs, 'objmirror')
else:
    soptoolutils.genericTool(kwargs, 'mirror')]]></script>
  </tool>

  <tool name="geometry_box" label="Box" icon="SOP_box">
    <helpURL>tool:box</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils

kwargs['bbox'] = hou.BoundingBox(-0.5, -0.5, -0.5, 0.5, 0.5, 0.5)
sphere = soptoolutils.genericTool(kwargs, 'box')
sphere.parm("type").set("polymesh")
sphere.parm("divrate1").set(2)
sphere.parm("divrate2").set(2)
sphere.parm("divrate3").set(2)
]]></script>
  </tool>

  <tool name="geometry_circle" label="Circle" icon="SOP_circle">
    <helpURL>tool:circle</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils
from soptoolutils import OrientInfo

if hou.ui.orientationUpAxis() == hou.orientUpAxis.Z:
    kwargs['bbox'] = hou.BoundingBox(-1.0, -.0, -1., 1.0, .0, 1.)
else:
    kwargs['bbox'] = hou.BoundingBox(-1.0, -1., -.0, 1.0, 1., .0)
sphere = soptoolutils.genericTool(kwargs, 'circle', orient=OrientInfo('orient'))
sphere.parm("type").set("poly")
]]></script>
  </tool>

  <tool name="geometry_line" label="Line" icon="SOP_line">
    <helpURL>tool:line</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils
from soptoolutils import OrientInfo

if hou.ui.orientationUpAxis() == hou.orientUpAxis.Z:
    kwargs['bbox'] = hou.BoundingBox(-1.0, -.0, -1., 1.0, .0, 1.)
else:
    kwargs['bbox'] = hou.BoundingBox(-1.0, -1., -.0, 1.0, 1., .0)
sphere = soptoolutils.genericTool(kwargs, 'line', orient=OrientInfo('dir'))
sphere.parm("type").set("poly")
]]></script>
  </tool>

  <tool name="geometry_platonic" label="Platonic Solids" icon="SOP_platonic">
    <helpURL>tool:platonic</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils
from soptoolutils import OrientInfo

rad = 0.5
# NB: Bounding box is the same regardless of hou.ui.orientationUpAxis().
kwargs['bbox'] = hou.BoundingBox(-rad, -rad, -rad, rad, rad, rad)
platonic = soptoolutils.genericTool(kwargs, 'platonic',  orient=OrientInfo('orient'))
platonic.parm("radius").set(rad)
]]></script>
  </tool>

  <tool name="geometry_grid" label="Grid" icon="SOP_grid">
    <helpURL>tool:grid</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils
from soptoolutils import OrientInfo

size = 4.0
if hou.ui.orientationUpAxis() == hou.orientUpAxis.Z:
    kwargs['bbox'] = hou.BoundingBox(-size/2.0, -size/2.0, 0, size/2.0, size/2.0, 0)
else:
    kwargs['bbox'] = hou.BoundingBox(-size/2.0, 0, -size/2.0, size/2.0, 0, size/2.0)
grid = soptoolutils.genericTool(kwargs, 'grid', orient=OrientInfo('orient'))
grid.parm("sizex").set(size)
grid.parm("sizey").set(size)
]]></script>
  </tool>

  <tool name="geometry_torus" label="Torus" icon="SOP_torus">
    <helpURL>tool:torus</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils
from soptoolutils import OrientInfo
orad = 0.5
irad = 0.25
if hou.ui.orientationUpAxis() == hou.orientUpAxis.Z:
    kwargs['bbox'] = hou.BoundingBox(-orad - irad, -orad - irad, -irad, orad + irad, orad + irad, irad)
else:
    kwargs['bbox'] = hou.BoundingBox(-orad - irad, -irad, -orad - irad, orad + irad, irad, orad + irad)
torus = soptoolutils.genericTool(kwargs, 'torus', orient=OrientInfo('orient'))
torus.parm("type").set("poly")
torus.parm("radx").set(orad)
torus.parm("rady").set(irad)
]]></script>
  </tool>

  <tool name="geometry_tube" label="Tube" icon="SOP_tube">
    <helpURL>tool:tube</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils
from soptoolutils import OrientInfo
rad = 0.5
height = 1.0
if hou.ui.orientationUpAxis() == hou.orientUpAxis.Z:
    kwargs['bbox'] = hou.BoundingBox(-rad, -rad, -height/2., rad, rad, height/2.)
else:
    kwargs['bbox'] = hou.BoundingBox(-rad, -height/2., -rad, rad, height/2., rad)
tube = soptoolutils.genericTool(kwargs, 'tube', orient=OrientInfo('orient'))
tube.parm("type").set("poly")
tube.parm("radscale").set(rad)
tube.parm("height").set(height)
]]></script>
  </tool>

  <tool name="geometry_sphere" label="Sphere" icon="SOP_sphere">
    <helpURL>tool:sphere</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils
from soptoolutils import OrientInfo
rad = 0.5
# NB: Bounding box is the same regardless of hou.ui.orientationUpAxis().
kwargs['bbox'] = hou.BoundingBox(-rad, -rad, -rad, rad, rad, rad)
sphere = soptoolutils.genericTool(kwargs, 'sphere', orient=OrientInfo('orient'))
sphere.parm("type").set("polymesh")
sphere.parm("radx").set(rad)
sphere.parm("rady").set(rad)
sphere.parm("radz").set(rad)
]]></script>
  </tool>

  <tool name="geometry_duplicate" label="Duplicate" icon="SOP_duplicate">
    <helpURL>operator:Sop/copyxform</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Manipulate</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils

scene_viewer = toolutils.sceneViewer();
current_path = scene_viewer.pwd();
if current_path.childTypeCategory() == hou.objNodeTypeCategory():
    toolutils.genericStateTool(kwargs, 'objcopy')
else:
    node = soptoolutils.genericTool(kwargs, 'copyxform')
    try:
        inputnode = node.inputs()[0]
        ingeo = inputnode.geometry()
        groupstr = node.parm('sourcegroup').evalAsString()
        bbox = ingeo.primBoundingBox(groupstr)
        node.parmTuple('p').set(bbox.center())
    except:
        pass
    ]]></script>
  </tool>

  <tool name="geometry_copy" label="Copy to Points" icon="SOP_copy">
    <helpURL>operator:Sop/copytopoints</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Manipulate</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils
sop = soptoolutils.genericTool(kwargs, 'copytopoints::2.0')
sop.parm('resettargetattribs').pressButton()]]></script>
  </tool>

  <tool name="cloud_light" label="Cloud Light" icon="SOP_cloudlight">
    <helpURL>operator:Sop/cloudlight</helpURL>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[import cloudtoolutils
cloudtoolutils.cloudLight(kwargs)
]]></script>
  </tool>

  <tool name="cloud_create" label="Cloud Rig" icon="SHELF_cloudrig">
    <helpURL>tool:cloudrig</helpURL>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[import cloudtoolutils
cloudtoolutils.cloudSource(kwargs)
]]></script>
  </tool>

  <tool name="terrain_dunes" label="Terrain: Dunes" icon="SHELF_terrain_fx">
    <helpURL>tool:terrain_dunes</helpURL>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[import terraintoolutils
terraintoolutils.fxDunes(kwargs)
]]></script>
  </tool>

  <tool name="terrain_canyon" label="Terrain: Canyon" icon="SHELF_terrain_fx">
    <helpURL>tool:terrain_canyon</helpURL>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[import terraintoolutils
terraintoolutils.fxCanyon(kwargs)
]]></script>
  </tool>

  <tool name="terrain_islands" label="Terrain: Islands" icon="SHELF_terrain_fx">
    <helpURL>tool:terrain_islands</helpURL>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[import terraintoolutils
terraintoolutils.fxIslands(kwargs)
]]></script>
  </tool>

  <tool name="terrain_moonscape" label="Terrain: Moonscape" icon="SHELF_terrain_fx">
    <helpURL>tool:terrain_moonscape</helpURL>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[import terraintoolutils
terraintoolutils.fxMoonscape(kwargs)
]]></script>
  </tool>

  <tool name="terrain_valley" label="Terrain: Valley" icon="SHELF_terrain_fx">
    <helpURL>tool:terrain_valley</helpURL>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[import terraintoolutils
terraintoolutils.fxValley(kwargs)
]]></script>
  </tool>

  <tool name="terrain_mountain" label="Terrain: Mountain" icon="SHELF_terrain_fx">
    <helpURL>tool:terrain_mountain</helpURL>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[import terraintoolutils
terraintoolutils.fxMountain(kwargs)
]]></script>
  </tool>

  <tool name="terrain_hills" label="Terrain: Hills" icon="SHELF_terrain_fx">
    <helpURL>tool:terrain_hills</helpURL>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[import terraintoolutils
terraintoolutils.fxRockyLowLands(kwargs)
]]></script>
  </tool>

  <tool name="sky_rig" label="Sky Rig" icon="SOP_sky">
    <helpURL>operator:Sop/sky</helpURL>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[import skytoolutils
skytoolutils.skySource(kwargs)
]]></script>
  </tool>

  <tool name="geometry_waves" label="Waves" icon="SHELF_oceanwaves">
    <helpURL>tool:waves</helpURL>
    <toolSubmenu>Manipulate</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

evalnode = soptoolutils.genericTool(kwargs, 'oceanevaluate')
spectrumnode = evalnode.parent().createNode('oceanspectrum')
spectrumnode.parm('windspeed').set(10)
evalnode.setNextInput(spectrumnode)
spectrumnode.moveToGoodPosition()
]]></script>
  </tool>

  <tool name="sop_ripple::2.0" label="Ripple" icon="SOP_ripple">
    <helpURL>operator:Sop/ripple::2.0</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/ripple</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Manipulate</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils
from soptoolutils import OrientInfo

ripple = soptoolutils.genericTool(kwargs, 'ripple::2.0', orient=OrientInfo('up'))
ripple.parm('usecenter').set(True)
]]></script>
  </tool>

  <tool name="object_matchtransform" label="Match Transform" icon="SHELF_matchtransform">
    <helpURL>tool:matchtransform</helpURL>
    <script scriptType="python"><![CDATA[import objecttoolutils
import toolutils

scene_viewer = toolutils.sceneViewer()
targets = scene_viewer.selectObjects(
                prompt = toolutils.selectionPrompt(hou.objNodeTypeCategory()),
                allow_multisel = True)
if len(targets) == 0:
    raise hou.Error("Nothing was selected")
for target in targets:
    target.setSelected(False)
sources = scene_viewer.selectObjects(
                prompt = "Select object to match",
                quick_select = True,
                allow_multisel = False)
if len(sources) == 0:
    raise hou.Error("No object to match was selected")
xform = sources[0].worldTransform()
for target in targets:
    target.setWorldTransform(xform)
]]></script>
  </tool>

  <tool name="tool_align" label="Align Components" icon="SHELF_aligncomponents">
    <helpURL>tool:aligncomponents</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Utility</toolSubmenu>
    <script scriptType="python"><![CDATA[import alignutils

alignutils.interactiveAlign()
]]></script>
  </tool>

  <tool name="object_freeze" label="Freeze" icon="SHELF_freezetransforms">
    <helpURL>tool:freeze</helpURL>
    <script scriptType="python"><![CDATA[import objecttoolutils
import toolutils


# Determine context
active_pane = toolutils.activePane(kwargs)
scene_viewer = toolutils.sceneViewer()
pwd = scene_viewer.pwd()

# Prompt selection
selected = scene_viewer.selectObjects(
                prompt = toolutils.selectionPrompt(hou.objNodeTypeCategory()),
                allow_multisel = True,
                allowed_types = ("geo",))
if len(selected) == 0:
    raise hou.Error("Nothing was selected")
objecttoolutils.freeze(selected)]]></script>
  </tool>

  <tool name="object_mocapbiped3" label="Mocap Biped 3" icon="CROWDS_agent">
    <helpURL>operator:Object/mocapbiped3</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Characters</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils
import toolutils

objecttoolutils.genericTool(kwargs, 'mocapbiped3', clicktoplace=False)
activepane = toolutils.activePane(kwargs)
if isinstance(activepane, hou.SceneViewer):
    activepane.enterViewState()
]]></script>
  </tool>

  <tool name="object_mocapbiped2" label="Mocap Biped 2" icon="CROWDS_agent">
    <helpURL>operator:Object/mocapbiped2</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Characters</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils
import toolutils

objecttoolutils.genericTool(kwargs, 'mocapbiped2', clicktoplace=False)
activepane = toolutils.activePane(kwargs)
if isinstance(activepane, hou.SceneViewer):
    activepane.enterViewState()
]]></script>
  </tool>

  <tool name="object_mocapbiped1" label="Mocap Biped 1" icon="CROWDS_agent">
    <helpURL>operator:Object/mocapbiped1</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Characters</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils
import toolutils

objecttoolutils.genericTool(kwargs, 'mocapbiped1', clicktoplace=False)
activepane = toolutils.activePane(kwargs)
if isinstance(activepane, hou.SceneViewer):
    activepane.enterViewState()
]]></script>
  </tool>

  <tool name="object_simplemale" label="Simple Male" icon="OBJ_simplemale">
    <helpURL>operator:Object/simplemale</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Characters</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils
import toolutils

objecttoolutils.genericTool(kwargs, 'simplemale', clicktoplace=False)
activepane = toolutils.activePane(kwargs)
if isinstance(activepane, hou.SceneViewer):
    activepane.enterViewState()
]]></script>
  </tool>

  <tool name="object_simplefemale" label="Simple Female" icon="OBJ_simplefemale">
    <helpURL>operator:Object/simplefemale</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Characters</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils
import toolutils

objecttoolutils.genericTool(kwargs, 'simplefemale', clicktoplace=False)
activepane = toolutils.activePane(kwargs)
if isinstance(activepane, hou.SceneViewer):
    activepane.enterViewState()
]]></script>
  </tool>

  <tool name="object_simplebiped" label="Simple Biped" icon="OBJ_simplebiped">
    <helpURL>operator:Object/simplebiped</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Characters</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils
import toolutils

objecttoolutils.genericTool(kwargs, 'simplebiped', clicktoplace=False)
activepane = toolutils.activePane(kwargs)
if isinstance(activepane, hou.SceneViewer):
    activepane.enterViewState()
]]></script>
  </tool>

  <tool name="sop_pointweld" label="Point Weld" icon="SOP_pointweld">
    <helpURL>operator:Sop/pointweld</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/pointweld</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Polygon</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'pointweld')]]></script>
  </tool>

  <tool name="sop_clusterpoints" label="Cluster Points" icon="SOP_clusterpoints">
    <helpURL>operator:Sop/clusterpoints</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/clusterpoints</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Attribute</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'clusterpoints')]]></script>
  </tool>

  <tool name="sop_mountain::2.0" label="Mountain" icon="SOP_mountain">
    <helpURL>operator:Sop/mountain</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/mountain::2.0</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Manipulate</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'mountain::2.0')]]></script>
  </tool>

  <tool name="sop_cloud::2.0" label="Cloud" icon="SOP_cloud">
    <helpURL>operator:Sop/cloud</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/cloud::2.0</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Volume</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'cloud::2.0')]]></script>
  </tool>

  <tool name="sop_cloudnoise" label="Cloud Noise" icon="SOP_cloudnoise">
    <helpURL>operator:Sop/cloudnoise</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/cloudnoise</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Volume</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'cloudnoise')]]></script>
  </tool>

  <tool name="sop_revolve::2.0" label="Revolve" icon="SOP_revolve">
    <helpURL>operator:Sop/revolve?version=2.0</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/revolve::2.0</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Manipulate</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'revolve::2.0')]]></script>
  </tool>

  <tool name="sop_constraintnetwork" label="Constraints Network" icon="SOP_constraintnetwork">
    <helpURL>tool:sop_constraintnetwork</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Constraints</toolSubmenu>
    <script scriptType="python"><![CDATA[#import soptoolutils
#soptoolutils.genericTool(kwargs, 'constraintnetwork')
import objecttoolutils
objecttoolutils.constraintnetworkStateToolApply(kwargs)]]></script>
  </tool>

  <tool name="key_tool_1" label="key_tool_1" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[from PySide2.QtWidgets import QWidget , QPushButton, QHBoxLayout
from PySide2.QtGui import * 
from PySide2.QtCore import Qt

import hou


        
class MyWindow(QWidget):
    
    def __init__(self) -> None:
        super().__init__()
        
        self.buildUI()
    
    def buildUI(self):
        layout = QHBoxLayout()
        self.btn1 = QPushButton("Ramp Up")
        self.btn1.clicked.connect(lambda :self.rampUp(2.0))
        layout.addWidget(self.btn1)
        self.setLayout(layout)

    def rampUp(self, exponent = 3.0):
        channel_editor = hou.ui.paneTabOfType(hou.paneTabType.ChannelEditor) # find any pane tab that is a Channel Editor
        print("------------------------------------")
        keyframes = channel_editor.graph().selectedKeyframes() # get the graph's selected keyframes in a dict called keyframes

        for parm in keyframes :
            param : hou.Parm = parm
            keys = keyframes[param]
            if len(keys) == 2 :
                key_1 : hou.Keyframe = keys[0]
                key_1.setExpression(f"easeinp({exponent})")
                # key_1.setAccel(0.333)
                key_2 : hou.Keyframe = keys[1]
                # key_2.setExpression("bezier()")
                # key_2.setInAccel(0.0)
                print(f"param : {param.name()}, {len(keys)} keys selected.")
                param.setKeyframes((key_1, key_2))
                print(keys)

win = MyWindow()
win.setParent(hou.qt.mainWindow(), Qt.Window)
win.show()
        
]]></script>
  </tool>
</shelfDocument>
